{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation",
    "keywords": "API Documentation Expand the menu to the left and click on the object and/or method you want to read more about. The two main classes in the EPAS Client Library are: EpasClient IClientApp"
  },
  "api/Westpay.Epas.AdminOperation.html": {
    "href": "api/Westpay.Epas.AdminOperation.html",
    "title": "Enum AdminOperation",
    "keywords": "Enum AdminOperation Administrative operations Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum AdminOperation Fields Name Description HostLogin Request the terminal to perform a login to the authorisation server. PrintConfiguration Request the terminal to print a configuration report UpdateParameters Request the terminal to check for parameter updates"
  },
  "api/Westpay.Epas.AdminResponse.html": {
    "href": "api/Westpay.Epas.AdminResponse.html",
    "title": "Class AdminResponse",
    "keywords": "Class AdminResponse The AdminResponse class encapsulates the result of an administrative request Inheritance System.Object SimpleResponse AdminResponse Inherited Members SimpleResponse.Result SimpleResponse.ErrorCondition SimpleResponse.AdditionalInformation System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class AdminResponse : SimpleResponse Fields Successful If set to true then the If this is true, then the administrative request was successful. Otherwise, the ErrorCondition , and AdditionalInformation properties will contain more details. Declaration public bool Successful Field Value Type Description System.Boolean Methods ToString() String representation for debugging Declaration public override string ToString() Returns Type Description System.String Summary of the response Overrides SimpleResponse.ToString()"
  },
  "api/Westpay.Epas.AltMethodTransaction.html": {
    "href": "api/Westpay.Epas.AltMethodTransaction.html",
    "title": "Class AltMethodTransaction",
    "keywords": "Class AltMethodTransaction Contains details of a transaction that was completed using an alternative payment method Inheritance System.Object AltMethodTransaction Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class AltMethodTransaction Constructors AltMethodTransaction(Decimal, String, String) Constructor Declaration public AltMethodTransaction(decimal amount, string method, string reference) Parameters Type Name Description System.Decimal amount System.String method Alternative payment method System.String reference Fields Method Indicates the alternative payment method that was used for the transaction Declaration public string Method Field Value Type Description System.String Reference Indicates the transaction reference Declaration public string Reference Field Value Type Description System.String TransactionAmount Transaction value Declaration public decimal TransactionAmount Field Value Type Description System.Decimal"
  },
  "api/Westpay.Epas.ApiResult.html": {
    "href": "api/Westpay.Epas.ApiResult.html",
    "title": "Enum ApiResult",
    "keywords": "Enum ApiResult Statuses related to the API usage. These do not reflect the outcome of transactions, only issues relating to API usage and communications. Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum ApiResult Fields Name Description ErrorCommunicationsFailure The library was unable to send the request / message to the terminal ErrorConnectionFailure The library failed to connect to the terminal ErrorInvalidParameter An invalid parameter was supplied to the method called ErrorLibraryFailure An internal error occurred in the library ErrorNotConnected The library is not yet connected to the terminal ErrorParseFailure The response from the terminal could not be parsed OK The request / message was successfully sent to the terminal for processing"
  },
  "api/Westpay.Epas.AuthorisationChannel.html": {
    "href": "api/Westpay.Epas.AuthorisationChannel.html",
    "title": "Enum AuthorisationChannel",
    "keywords": "Enum AuthorisationChannel Authorisation method that was used Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum AuthorisationChannel Remarks The authorising entity is documented in CHAOI specification, section 8.1.4. The character enumeration value of each on corresponds to the CHAOI specification. Fields Name Description DeclinedBeforeAuth Transaction was declined before authorisation was attempted None Transaction was not authorised Offline Transaction was authorised offline Online Transaction was authorised online Phone Transaction was authorised by phone call"
  },
  "api/Westpay.Epas.AuthorisingEntity.html": {
    "href": "api/Westpay.Epas.AuthorisingEntity.html",
    "title": "Enum AuthorisingEntity",
    "keywords": "Enum AuthorisingEntity Authorising entities Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum AuthorisingEntity Remarks The authorising entity is documented in the CHAOI specification, section 8.1.5. The character enumeration value of each on corresponds to the CHAOI specification. Fields Name Description CardIssuer Authorised by the card issuer DeclinedBeforeAuth Transaction was declined before authorisation was attempted DPC0 Authorised by the DPC DPC3 Authorised by the DPC DPC4 Authorised by the DPC InterchangeInterface Interchange interface process InterchangeVisaEpss Interchange (VISA or EPSS) LocalDevice Authorised locally in the terminal ManualEntry Approval code was manually entered Merchant Authorised by merchant (acquiring) host"
  },
  "api/Westpay.Epas.CurrencyCodes.html": {
    "href": "api/Westpay.Epas.CurrencyCodes.html",
    "title": "Enum CurrencyCodes",
    "keywords": "Enum CurrencyCodes ISO 4217 currency codes Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum CurrencyCodes Fields Name Description AED AFN ALL AMD ARS AUD AZN BAM BDT BGN BHD BND BOB BRL BYR BZD CAD CHF CLP CNY COP CRC CZK DKK DOP DZD EEK EGP ETB EUR GBP GEL GTQ HKD HNL HRK HUF IDR ILS INR IQD IRR ISK JMD JOD JPY KES KGS KHR KRW KWD KZT LAK LBP LKR LTL LVL LYD MAD MKD MNT MOP MVR MXN MYR NIO NOK NPR NZD OMR PAB PEN PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SEK SGD SYP THB TJS TND TRY TTD TWD UAH USD UYU UZS VEF VND XOF YER ZAR ZWL"
  },
  "api/Westpay.Epas.EnableReadersResponse.html": {
    "href": "api/Westpay.Epas.EnableReadersResponse.html",
    "title": "Class EnableReadersResponse",
    "keywords": "Class EnableReadersResponse Encapsulates the details of the response to a request to enable or disable the card readers on the terminal. Inheritance System.Object SimpleResponse EnableReadersResponse Inherited Members SimpleResponse.Result SimpleResponse.ErrorCondition SimpleResponse.AdditionalInformation System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class EnableReadersResponse : SimpleResponse Fields Successful Indicates if the enable / disable request was successful Declaration public bool Successful Field Value Type Description System.Boolean Methods ToString() String representation for debugging Declaration public override string ToString() Returns Type Description System.String Summary of the response Overrides SimpleResponse.ToString()"
  },
  "api/Westpay.Epas.EntryMethod.html": {
    "href": "api/Westpay.Epas.EntryMethod.html",
    "title": "Enum EntryMethod",
    "keywords": "Enum EntryMethod Enumeration of different possible card presentation methods Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum EntryMethod Remarks The card entry methods are documented in the CHAOI specification, section 8.1.2. The character enumeration value of each on corresponds to the CHAOI specification. Note that CHAOI does not recognise contactless transactions. The entry method code for contactless transaction is ‘K’. Note that contactless card transactions should include the text “CONTACTLESS” on the receipt. This can be in English or translated to the appropriate language. Fields Name Description ChipInserted Card was inserted into the smartcard reader Contactless Card was tapped and read by the rfid reader. Manual The card data was entered manually on the terminal keypad Swiped The card was swiped in magnetic card reader Unknown For future expansion we can allow unknown entry methods in cases where the terminal supports methods unknown to this library."
  },
  "api/Westpay.Epas.EpasClient.CardAcceptedNotification.html": {
    "href": "api/Westpay.Epas.EpasClient.CardAcceptedNotification.html",
    "title": "Delegate EpasClient.CardAcceptedNotification",
    "keywords": "Delegate EpasClient.CardAcceptedNotification Delegate definition for card acceptance notifications Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public delegate void CardAcceptedNotification(string maskedCardNumber); Parameters Type Name Description System.String maskedCardNumber string parameter"
  },
  "api/Westpay.Epas.EpasClient.CardActionNotification.html": {
    "href": "api/Westpay.Epas.EpasClient.CardActionNotification.html",
    "title": "Delegate EpasClient.CardActionNotification",
    "keywords": "Delegate EpasClient.CardActionNotification Delegate definition for card insertion and removal notifications Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public delegate void CardActionNotification(bool cardInserted); Parameters Type Name Description System.Boolean cardInserted True if a card has been inserted, false if it has been removed"
  },
  "api/Westpay.Epas.EpasClient.EpasMessageReceiver.html": {
    "href": "api/Westpay.Epas.EpasClient.EpasMessageReceiver.html",
    "title": "Delegate EpasClient.EpasMessageReceiver",
    "keywords": "Delegate EpasClient.EpasMessageReceiver Delegate definition for a raw EPAS XML message handler Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public delegate void EpasMessageReceiver(string message); Parameters Type Name Description System.String message XML message"
  },
  "api/Westpay.Epas.EpasClient.html": {
    "href": "api/Westpay.Epas.EpasClient.html",
    "title": "Class EpasClient",
    "keywords": "Class EpasClient The EpasClient class provides the functionality required to operate a Westpay terminal. Inheritance System.Object EpasClient Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class EpasClient Constructors EpasClient(IClientApp) Constructor Declaration public EpasClient(IClientApp app) Parameters Type Name Description IClientApp app The client application Fields BusyStatus Handler for busy status notifications Declaration public EpasClient.StatusNotification BusyStatus Field Value Type Description EpasClient.StatusNotification Remarks There are times when the terminal is going to be busy for an unknown time, normally when it is downloading new parameters. In these situations the terminal will notify its busy status by calling this callback with busy set to true . When the activity ends it will call this callback again with busy set to false . Examples ... mEpas.BusyStatus = HandleBusyState; ... public void HandleBusyState(bool busy) { if (InvokeRequired) { Invoke(new Action(() => HandleBusyState(busy))); } else { if (busy) { lblBusy.BackColor = Color.LightPink; lblBusy.ForeColor = Color.DarkRed; lblBusy.Text = \"BUSY\"; } else { lblBusy.BackColor = Color.Transparent; lblBusy.ForeColor = Color.Gray; lblBusy.Text = \"OK\"; } } } CardAccepted The handler for card accepted notifications Declaration public EpasClient.CardAcceptedNotification CardAccepted Field Value Type Description EpasClient.CardAcceptedNotification Remarks The terminal�s configuration includes a list of card ranges that is used to identify valid card numbers. When a payment card is presented and is considered valid then this callback is used to notify the ECR of the masked card number. The masking means that only the first six digits and last four digits of the card number are shown. The rest are replaced with asterisk ( * ) characters. Note that loyalty cards are handled separately, see LoyaltyCardPresented(String, out Boolean) . Examples ... mEpas.CardAccepted = HandleCardAccepted; ... public void HandleCardAccepted(string maskedCardNumber) { if (InvokeRequired) { Invoke(new Action(() => HandleCardAccepted(maskedCardNumber))); } else { lblCardPresent.Text = \"CARD: \" + maskedCardNumber); Log(\"Card accepted: \" + maskedCardNumber); } } CardStatus The handler for card insert and removal notifications Declaration public EpasClient.CardActionNotification CardStatus Field Value Type Description EpasClient.CardActionNotification Remarks This callback is used when the terminal recognises that a card has been inserted in, or removed from, the card reader. The ECR might use this status to prompt the cardholder to remove the card when the transaction is complete. This notification only applies to the smart card reader. Cards that are tapped or swiped do not trigger this callback. Note that if a card inserted while the card readers in the terminal are not enabled then this notification is used as soon as the readers are enabled. Examples ... mEpas.CardStatus = CardStatus; ... public void CardStatus(bool inserted) { if (InvokeRequired) { Invoke(new Action(() => CardStatus(inserted))); } else { if (inserted) { lblCardPresent.Text = \"CARD INSERTED\"; } else { lblCardPresent.Text = \"CARD TAKEN\"; } } } LinkStatus Handler for link status notifications Declaration public EpasClient.StatusNotification LinkStatus Field Value Type Description EpasClient.StatusNotification Remarks This callback is called when the EPAS client library detects a change in the link status between the terminal and the ECR. When the linkUp parameter is true, the link is functioning. When the parameter is false then there has been a link failure and the ECR should take appropriate action. Examples ... mEpas.LinkStatus = HandleLinkState; ... public void HandleLinkState(bool linkUp) { if (InvokeRequired) { Invoke(new Action(() => HandleLinkState(linkUp))); } else { if (linkUp) { lblLink.BackColor = Color.PaleGreen; lblLink.ForeColor = Color.DarkGreen; lblLink.Text = \"OK\"; } else { lblLink.BackColor = Color.LightPink; lblLink.ForeColor = Color.DarkRed; lblLink.Text = \"DOWN\"; } } } RawMessageHandler Handler for raw EPAS XML messages. This should only be used with a very good reason. Declaration public EpasClient.EpasMessageReceiver RawMessageHandler Field Value Type Description EpasClient.EpasMessageReceiver Remarks It may be useful or necessary for the ECR to be able to directly inspect EPAS XML messages that are received in the library. In these situations, the ECR can assign a handler to the RawMessageHandler callback. This feature is only provided as a fallback way to deal with situations that the library does not handle. There is no clear usage for this, other than that it allows the ECR to directly handle EPAS messages to achieve some very specific objective that it cannot achieve via the library API. In normal use the ECR should not need to provide a handler for this callback. Examples ... mEpas.RawMessageHandler = HandleIncomingXML; ... private void HandleIncomingXML(string rawXml) { Log(LogLevel.Debug, \"Incoming XML:\"); Log(LogLevel.Debug, rawXml); } Properties Options Operating parameters for the library Declaration public OperatingParameters Options { get; } Property Value Type Description OperatingParameters Methods CashAdvance(Decimal, out TransactionResponse) Performs a cash advance / withdrawal transaction. Declaration public ApiResult CashAdvance(decimal cashAmount, out TransactionResponse response) Parameters Type Name Description System.Decimal cashAmount Amount of cash to withdraw TransactionResponse response Transaction response Returns Type Description ApiResult Standard ApiResult values Examples /// <summary> /// Runs a cash advance transaction. /// </summary> /// <param name=\"amount\">Cash amount</param> /// sending the transaction result</param> public void CashAdvance(decimal amount) { Log($\"Cash Advance of {amount:.00}\"); TransactionResponse response; ApiResult result = mEpas.CashAdvance(amount, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Cash Advance: \" + response?.ToString()); } Close() Close the library Declaration public void Close() ConnectNetwork(TerminalNetworkConnection, Boolean) Attempts to create a network connection to the terminal Declaration public ApiResult ConnectNetwork(TerminalNetworkConnection connectionDetails, bool forceReconnect = false) Parameters Type Name Description TerminalNetworkConnection connectionDetails Details of how to connect to the terminal via network System.Boolean forceReconnect Set to true to close an existing connection and force a new connection to be made Returns Type Description ApiResult A standard ApiResult value Remarks The ConnectNetwork method attempts to connect to the terminal over a TCP/IP network connection. The connectionDetails parameter contains the details needed for the connection. If the forceReconnect parameter is true then if there is already a connection in place that connection will be closed and a new one will be created. Otherwise, if forceReconnect is false , if there is already a connection in place then this method will just return OK . Examples private void ConnectToTerminal() { Log(\"Connecting...\"); bool dataOk = true; TerminalNetworkConnection tc = new TerminalNetworkConnection(); try { tc.TerminalConnectionDetails = new IPEndPoint(IPAddress.Parse(txtTerminalAddress.Text), int.Parse(txtTerminalPort.Text)); } catch (Exception) { dataOk = false; LogError(\"Unable to parse terminal address and / or port\"); } tc.UseKeepAlive = optKeepalive.Checked; if (dataOk) { ApiResult result = mEpas.ConnectNetwork(tc, optForceReconnect.Checked); LogApiResult(result, \"Connect\"); } } ConnectUsb(String, Boolean) Attempts to create a USB / serial connection to the terminal Declaration public ApiResult ConnectUsb(string comPort, bool forceReconnect = false) Parameters Type Name Description System.String comPort COM port name, e.g. COM6 , of the virtual com port that is created by the driver. Normally not needed. System.Boolean forceReconnect Set to true to close an existing connection and force a new connection to be made. Returns Type Description ApiResult A standard ApiResult value. Remarks The ConnectUsb method attempts to connect to the terminal over a USB connection. When configured for USB communications, the terminal runs the USB connection in CDC mode . This causes the connected PC to create a virtual serial port. In Windows 10 this should not need any additional driver support. The comPort parameter contains the name of this virtual serial port, e.g. COM6 . The EPAS Client Library, however, will attempt to automatically detect the virtual serial port and if it can find a port that is connected to the terminal then it will use it. The value of comPort is only used if the library is unable to identify the port name automatically, in which case it will use comPort if it has been defined. It is normally OK to leave the comPort value set to null or an empty string. If the forceReconnect parameter is true then if there is already a connection in place that connection will be closed and a new one will be created. Otherwise, if forceReconnect is false , if there is already a connection in place then this method will just return OK . Examples ApiResult result = mEpas.ConnectUsb(txtComPort.Text, optForceReconnect.Checked); Disconnect() Disconnect from the terminal Declaration public ApiResult Disconnect() Returns Type Description ApiResult A standard ApiResult value Remarks The Disconnect method closes the connection to the terminal, whether it is network or USB. Examples private void btnDisconnect_Click() { Log(\"Disconnecting\"); mEpas?.Disconnect(); } EnableCardReaders(Boolean, out EnableReadersResponse) Enables or disables the card readers on the terminal. Declaration public ApiResult EnableCardReaders(bool enable, out EnableReadersResponse response) Parameters Type Name Description System.Boolean enable True to enable the card readers, false to disable them. EnableReadersResponse response Response from the terminal Returns Type Description ApiResult Standard API result value Login(TerminalEnvironment, out LoginResponse) Sends a login request to the terminal. The login request provides essential information to the terminal and enables transactions to be run. Declaration public ApiResult Login(TerminalEnvironment environment, out LoginResponse response) Parameters Type Name Description TerminalEnvironment environment Details of the terminal's operating environment and major parameters LoginResponse response Response from the connect attempt Returns Type Description ApiResult A standard ApiResult value Remarks The Login method carries details of the operating environment for the terminal. If the method returns OK then the response parameter contains the terminal’s response to the login request. Examples TerminalEnvironment te = new TerminalEnvironment() { AuthorisationServer = new IPEndPoint(IPAddress.Parse(\"185.27.171.42\"), 55144), ConfigurationServer = new IPEndPoint(IPAddress.Parse(\"185.27.171.42\"), 55133), ISO639_1_LanguageCode = TerminalEnvironment.LangSwedish, OperatorId = \"cashier_1\", TerminalId = \"80000082\" }; if (epas.Login(te, out LoginResponse lr) == ApiResult.OK) { if (lr.LoggedIn) { ... Logout(out LogoutResponse) Sends a logout request to the terminal. Declaration public ApiResult Logout(out LogoutResponse response) Parameters Type Name Description LogoutResponse response Response from the logout attempt Returns Type Description ApiResult A standard ApiResult value Purchase(Decimal, String, out TransactionResponse) Starts a purchase transaction with only the purchase amount specified. Declaration public ApiResult Purchase(decimal purchaseAmount, string paymentMethod, out TransactionResponse response) Parameters Type Name Description System.Decimal purchaseAmount Transaction value System.String paymentMethod Name of alternative payment method to use TransactionResponse response Transaction result Returns Type Description ApiResult Standard API outcome value Examples /// <summary> /// Runs a simple purchase transaction for the given amount using Swish, if available. /// There is no cashback or swipe-ahead in this transaction. /// </summary> /// <param name=\"amount\">Transaction amount</param> public void SimpleSwishPurchase(decimal amount) { Log($\"Simple Swish-purchase of {amount:.00}\"); TransactionResponse response; ApiResult result = mEpas.Purchase(amount, “Swish”, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Simple Swish-purchase: \" + response?.ToString()); } Purchase(Decimal, out TransactionResponse) Starts a purchase transaction with only the purchase amount specified. Declaration public ApiResult Purchase(decimal purchaseAmount, out TransactionResponse response) Parameters Type Name Description System.Decimal purchaseAmount Transaction value TransactionResponse response Transaction result Returns Type Description ApiResult Standard API outcome value Examples /// <summary> /// Runs a simple purchase transaction for the given amount. There is no cashback /// or swipe-ahead in this transaction. /// </summary> /// <param name=\"amount\">Transaction amount</param> public void SimplePurchase(decimal amount) { Log($\"Simple purchase of {amount:.00}\"); TransactionResponse response; ApiResult result = mEpas.Purchase(amount, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Simple purchase: \" + response?.ToString()); } Purchase(PurchaseTransactionAmounts, out TransactionResponse) Begins a purchase transaction. The method returns when the transaction is complete. Declaration public ApiResult Purchase(PurchaseTransactionAmounts transactionAmounts, out TransactionResponse response) Parameters Type Name Description PurchaseTransactionAmounts transactionAmounts Transaction amounts TransactionResponse response Transaction response Returns Type Description ApiResult A standard ApiResult value Examples /// <summary> /// Runs a full-featured purchase transaction /// </summary> /// <param name=\"amount\">Purchase amount</param> /// <param name=\"cashback\">Cashback amount</param> public void PurchaseWithCashback(decimal amount, decimal cashback) { Log($\"Purchase of {amount:.00} + {cashback:.00} cashback\"); TransactionResponse response; PurchaseTransactionAmounts txnAmount = new PurchaseTransactionAmounts(amount, cashback); ApiResult result = mEpas.Purchase(txnAmount, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Purchase: \" + response?.ToString()); } PurchaseBeforeAmount(out TransactionResponse) Starts a purchase transaction with no amount. The amount must be sent when available in order for the transaction to be completed. Declaration public ApiResult PurchaseBeforeAmount(out TransactionResponse response) Parameters Type Name Description TransactionResponse response Transaction result Returns Type Description ApiResult Standard API outcome value Examples /// <summary> /// Runs a pre-amount purchase transaction, where the amount is supplied later. /// Also known as swipe-ahead and pre-tap. /// </summary> public void PreAmountPurchase() { Log(\"PreAmount purchase\"); TransactionResponse response; ApiResult result = mEpas.PurchaseBeforeAmount(out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"PreAmount purchase: \" + response?.ToString()); } See Also SendPurchaseAmounts(PurchaseTransactionAmounts) Refund(Decimal, out TransactionResponse) Begins a refund transaction. The method returns when the transaction is complete. Declaration public ApiResult Refund(decimal refundAmount, out TransactionResponse response) Parameters Type Name Description System.Decimal refundAmount Amount to refund TransactionResponse response Transaction response Returns Type Description ApiResult A standard ApiResult value Examples /// <summary> /// Runs a refund transaction /// </summary> /// <param name=\"amount\">Refund amount</param> /// sending the transaction result</param> public void Refund(decimal amount) { Log($\"Refund of {amount:.00}\"); TransactionResponse response; ApiResult result = mEpas.Refund(amount, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Refund: \" + response?.ToString()); } Refund(AltMethodTransaction, out TransactionResponse) Begins a refund transaction where the transaction being refunded was completed using an alternative payment method. Alternative payment methods are where a card was not used in the terminal. The method returns when the transaction is complete. Declaration public ApiResult Refund(AltMethodTransaction transactionDetails, out TransactionResponse response) Parameters Type Name Description AltMethodTransaction transactionDetails Transaction details TransactionResponse response Transaction response Returns Type Description ApiResult A standard ApiResult value RequestAdministrativeOperation(AdminOperation, out AdminResponse) Sends an administrative request to the terminal. Declaration public ApiResult RequestAdministrativeOperation(AdminOperation operation, out AdminResponse response) Parameters Type Name Description AdminOperation operation Administrative operation being requested AdminResponse response Terminal response Returns Type Description ApiResult Standard ApiResult value RequestTransactionAbort() Request that the current transaction should be aborted. The transaction may be at a stage where an abort is not possible, so the client must wait for the transaction result to be sent. Declaration public ApiResult RequestTransactionAbort() Returns Type Description ApiResult A standard ApiResult value. This indicates only if the request was sent to the terminal. The transaction result will indicate if the request was successful or not. ReverseLastTransaction(String, out TransactionResponse) Requests that the last transaction should be reversed. Note that only approved transactions can be reversed, and that a reversal can only be applied to the most recent transaction that was performed. If an approved transaction is followed by a declined transaction then the approved transaction can no longer be reversed. Declaration public ApiResult ReverseLastTransaction(string transactionReference, out TransactionResponse response) Parameters Type Name Description System.String transactionReference Reference number of the transaction to be reversed, provided in the TransactionResponse class. TransactionResponse response The reversal response Returns Type Description ApiResult A standard ApiResult value Examples /// <summary> /// Reverse the last transaction /// </summary> public void Reversal() { Log(\"Reversal\"); TransactionResponse response; ApiResult result = mEpas.ReverseLastTransaction(txnRef.Text, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Reversal: \" + response?.ToString()); } SendPurchaseAmounts(PurchaseTransactionAmounts) Sends the amounts for a Purchase before Amount transaction. Declaration public ApiResult SendPurchaseAmounts(PurchaseTransactionAmounts transactionAmount) Parameters Type Name Description PurchaseTransactionAmounts transactionAmount Transaction amounts Returns Type Description ApiResult Standard API outcome value Remarks A purchase transaction with zero amounts must have been started before this method can be called. Examples /// <summary> /// Send the transaction amounts for a pre-amount purchase transaction. /// </summary> /// <param name=\"amount\">Purchase amount</param> /// <param name=\"cashback\">Cashback amount</param> public void SendAmounts(decimal amount, decimal cashback) { Log($\"Sending amounts: {amount:.00} + {cashback:.00} cashback\"); PurchaseTransactionAmounts txnAmount = new PurchaseTransactionAmounts(amount, cashback); LogApiResult(mEpas.SendPurchaseAmounts(txnAmount), \"SendPurchaseAmounts\"); } See Also PurchaseBeforeAmount(out TransactionResponse) SendRawXml(String) Sends raw EPAS XML messages to the terminal. Declaration public ApiResult SendRawXml(string xml) Parameters Type Name Description System.String xml EPAS XML message Returns Type Description ApiResult Standard API result indicating the outcome of the send attempt"
  },
  "api/Westpay.Epas.EpasClient.StatusNotification.html": {
    "href": "api/Westpay.Epas.EpasClient.StatusNotification.html",
    "title": "Delegate EpasClient.StatusNotification",
    "keywords": "Delegate EpasClient.StatusNotification Delegate definition for status notifications Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public delegate void StatusNotification(bool state); Parameters Type Name Description System.Boolean state True if the status is active, false if it is not active"
  },
  "api/Westpay.Epas.ErrorConditions.html": {
    "href": "api/Westpay.Epas.ErrorConditions.html",
    "title": "Enum ErrorConditions",
    "keywords": "Enum ErrorConditions Condition that has produced an error on the processing of a message request Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum ErrorConditions Fields Name Description Aborted The Initiator of the request has sent an Abort message request, which was accepted and processed. Busy The system is busy, try later Cancel The user has aborted the transaction on the PED keyboard, for instance during PIN entering. DeviceOut Device out of order InProgress The transaction is still in progress and then the command cannot be processed InvalidCard The card entered by the Customer cannot be processed by the POI because this card is not configured in the system LoggedOut Not logged in MessageFormat Error on the format of the message, AdditionalResponse shall contain the identification of the data, and the reason in clear text. None The request was successfully processed NotAllowed A service request is sent during a Service dialogue. A combination of services not possible to provide. During the CardReaderInit message processing, the user has entered a card which has to be protected by the POI, and cannot be processed with this device request from the external, and then the Sale System. NotFound The transaction is not found (e.g. for a reversal or a repeat) PaymentRestriction Some sale items are not payable by the card proposed by the Customer Refusal The transaction is refused by the host or the rules associated to the card, and cannot be repeated UnavailableDevice The hardware is not available (absent, not configured...) UnavailableService The service is not available (not implemented, not configured, protocol version too old...) UnreachableHost Acquirer or any host is unreachable or has not answered to an online request, so is considered as temporarily unavailable. Depending on the Sale context, the request could be repeated (to be compared with \"Refusal\"). WrongPIN The user has entered the PIN on the terminal and the verification fails."
  },
  "api/Westpay.Epas.html": {
    "href": "api/Westpay.Epas.html",
    "title": "Namespace Westpay.Epas",
    "keywords": "Namespace Westpay.Epas Classes AdminResponse The AdminResponse class encapsulates the result of an administrative request AltMethodTransaction Contains details of a transaction that was completed using an alternative payment method EnableReadersResponse Encapsulates the details of the response to a request to enable or disable the card readers on the terminal. EpasClient The EpasClient class provides the functionality required to operate a Westpay terminal. LoginResponse The LoginResponse class encapsulates the result of a login request LogoutResponse The LogoutResponse class encapsulates the result of a logout request OperatingParameters Parameters related to terminal operations and transactions. PurchaseTransactionAmounts Encapsulates the amounts involved in a purchase transaction ReceiptData Container class for all the data required to print a receipt ReceiptData.AuthorisationData Data relating to the authorisation part of the transaction ReceiptData.CardData Card details ReceiptData.DccData The DCC class instance is included if Direct Currency Conversion was selected by the cardholder for the transaction. ReceiptData.EmvData The EmvData class instance is included if the card used involved EMV data. ReceiptData.MerchantData Contains details of the merchant. These are taken from the terminal’s configuration data, and it is reasonable for the ECR to ignore these values and use merchant details that are configured directly in the ECR. ReceiptData.TransactionData The TransactionData class contains data elements describing the transaction SimpleResponse Base class for responses that will be sent back on the API TerminalEnvironment Encapsulates terminal's operating environment and major parameters TerminalNetworkConnection Encapsulates all that is needed to create a network connection to a terminal TransactionResponse The TransactionResponse class encapsulates the result of a purchase, refund or cash advance request Interfaces IClientApp Interface definition for an app that uses the EPAS Client Library Enums AdminOperation Administrative operations ApiResult Statuses related to the API usage. These do not reflect the outcome of transactions, only issues relating to API usage and communications. AuthorisationChannel Authorisation method that was used AuthorisingEntity Authorising entities CurrencyCodes ISO 4217 currency codes EntryMethod Enumeration of different possible card presentation methods ErrorConditions Condition that has produced an error on the processing of a message request LogLevel Logging levels. A production build of the client library will not issue debug level logging. ReceiptData.TranslatedTextId The terminal will provide receipt texts that are translated to the customer's chosen language. These texts are referenced by the following IDs ReceiptVersion Indicates the intended recipient of a receipt TransactionOutcome Indicates the result of a transaction TransactionType Transaction types VerificationMethod Cardholder verification methods Delegates EpasClient.CardAcceptedNotification Delegate definition for card acceptance notifications EpasClient.CardActionNotification Delegate definition for card insertion and removal notifications EpasClient.EpasMessageReceiver Delegate definition for a raw EPAS XML message handler EpasClient.StatusNotification Delegate definition for status notifications"
  },
  "api/Westpay.Epas.IClientApp.html": {
    "href": "api/Westpay.Epas.IClientApp.html",
    "title": "Interface IClientApp",
    "keywords": "Interface IClientApp Interface definition for an app that uses the EPAS Client Library Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public interface IClientApp Methods CheckDccOnOriginalTransaction(String, out Boolean) Called during a refund transaction with a DCC-eligible card, to check if DCC was used in the original transaction. This will be clear from the original receipt. Declaration bool CheckDccOnOriginalTransaction(string displayText, out bool dccWasUsed) Parameters Type Name Description System.String displayText Text to display. System.Boolean dccWasUsed Set to true if DCC was used in the original purchase, or false if no DCC was used. Returns Type Description System.Boolean true if the transaction should continue, false to abort the transaction. Remarks Dynamic Currency Conversion is a process where a cardholder from a different country can choose to pay for a transaction in their home currency rather than in the currency of the merchant. This introduces a challenge for refunds, because if a refund transaction is to be done with a ‘foreign’ card then the refund should be made using the converted currency if the original purchase was made with a converted currency, even though the currency rates may have changed between purchase and refund. The only way to know if DCC was used in the original purchase is to check the receipt. If this method is called, therefore, the cashier should check the original receipt to find out if DCC was used. If so, dccWasUsed should be set to true , otherwise it should be false if DCC was not used. The displayText parameter contains a prompt for the cashier to check for DCC on the original purchase. Normally the ECR should return true from this method, indicating that the setting of dccWasUsed is valid. If the ECR returns false then the library will abort the current transaction. Examples public bool CheckDccOnOriginalTransaction(string displayText, out bool dccWasUsed) { Display(displayText); dccWasUsed = MessageBox.Show(\"Was DCC used in the original transaction?\", \"DCC\", MessageBoxButtons.YesNo) == DialogResult.Yes; return true; } Display(String) Called when the client app should display some text to the cashier. Declaration void Display(string text) Parameters Type Name Description System.String text Text to be displayed Remarks The terminal will send messages intended for the cashier. These are localised into the cashier’s chosen language and are not always the same as the messages that appear on the terminal’s display. Each line in the text is separated by a newline character ( \\n ) Examples public void Display(string text) { if (InvokeRequired) { Invoke(new Action(() => Display(text))); } else { txtCashierDisplay.Text = text.Replace(\"\\n\", Environment.NewLine); } } HandleVoiceReferral(String, out String) Called when a voice referral should be done, which involves calling the card issuer to get an approval code verbally. Declaration bool HandleVoiceReferral(string displayText, out string approvalCode) Parameters Type Name Description System.String displayText Text to display. This text includes the phone number, if needed. System.String approvalCode The approval code provided by the issuer. Returns Type Description System.Boolean true if the transaction should continue with the supplied approval code, false to abort the transaction. Remarks If a transaction cannot be authorised online due to communications problems then it may be suitable for voice referral. This is where the cashier contacts the authorisation centre directly by telephone and provides the transaction and card details verbally. If the transaction is approved then the cashier will be provided with an approval code. When this method is called the text prompt for the cashier is provided in displayText , and this should contain the phone number to call. The approval code should be provided in the approvalCode parameter. If the value in approvalCode is empty or null on return then the transaction will be aborted. Normally the ECR should return true from this method, indicating that the setting of approvalCode is valid. If the ECR returns false then the library will abort the current transaction. Examples bool IClientApp.HandleVoiceReferral(string displayText, out string approvalCode) { bool result = false; approvalCode = null; TextEntry vr = new TextEntry(\"Voice referral approval code\", displayText); if (vr.ShowDialog() == DialogResult.OK) { approvalCode = vr.EnteredText; result = true; } return result; } Log(LogLevel, String) Logs text with the client application. Declaration void Log(LogLevel level, string text) Parameters Type Name Description LogLevel level Logging level System.String text Text to log Remarks The EPAS Client Library will generate logging in various situations. When this happens, this method is called. This method is always called on a dedicated thread so that it can be called while another method or handler is executing. Only one call to Log will be made at a time, however – there will be no overlapping calls made. The level parameter indicates that the log entry is one of error, status or debug logging. The text to be logged is in the text parameter. If the ECR has a logging function then it is recommended that these texts are written to the ECR log. The ECR can, of course, filter the logging according to configuration. For example, it may not make sense to store debug level logging when in a production environment. Examples public void Log(LogLevel level, string text) { try { LogTimestamp(); RawLog(text); } catch (Exception) { // Logger exceptions are not logged. } } LoyaltyCardPresented(String, out Boolean) Called when a loyalty card is presented to the terminal. Declaration bool LoyaltyCardPresented(string cardNumber, out bool cardAccepted) Parameters Type Name Description System.String cardNumber The loyalty card number. System.Boolean cardAccepted Set to true if the loyalty card is accepted and can be processed, or false to reject the loyalty card. Returns Type Description System.Boolean true if the transaction should continue, false to abort the transaction. Remarks The terminal has a list of card ranges and some of those identify cards as loyalty / bonus cards. If one of those cards is presented to the terminal then this method is called. The loyalty card number is provided in the cardNumber parameter. The ECR should decide if the loyalty card number is valid for the merchant. If the card is valid then the ECR should set cardAccepted to true , otherwise false will indicate that the loyalty card was not accepted. Neither of these affects the transaction in progress on the terminal. Normally the ECR should return true from this method, indicating that the setting of cardAccepted is valid. If the ECR returns false then the library will abort the current transaction. Examples public bool LoyaltyCardPresented(string cardNumber, out bool cardAccepted) { cardAccepted = MessageBox.Show(\"Accept loyalty card \" + cardNumber, \"Loyalty card\", MessageBoxButtons.YesNo) == DialogResult.Yes; return true; } ParameterDownloadAvailable(String, out Boolean) Called when a parameter download is available, and the ECR is permitted to choose whether to permit the download or delay it until later. Declaration void ParameterDownloadAvailable(string displayText, out bool permitDownload) Parameters Type Name Description System.String displayText Text to display System.Boolean permitDownload true to permit the download immediately, false to delay until later. Remarks From time to time the terminal will need parameter updates to be done. These are usually done at the beginning of the day after the ECR logs in to the terminal, but it is possible that the terminal will ask the ECR if the parameters can be downloaded immediately. The ECR can choose to respond with permitDownload set to false to delay the parameter download until later, though the same question will be asked repeatedly. It should be noted that this functionality is very rarely used. The simplest approach is to simply set permitDownload to true to allow the download, but the ECR could implement a time-based response that sets permitDownload according to the time of day. The displayText parameter contains a prompt to inform the cashier that a download is available. There is no return value here. In the other methods of this type, the return value indicates if the response is valid or if the transaction should be cancelled. This method, however, is only ever called after the end of a transaction so there is nothing to abort. Examples public void ParameterDownloadAvailable(string displayText, out bool permitDownload) { Display(displayText); permitDownload = MessageBox.Show(\"Download configuration?\", \"Configuration update\", MessageBoxButtons.YesNo) == DialogResult.Yes; } PaymentCodeRequired(String, out String) Called when a card requires a payment code to be entered. Declaration bool PaymentCodeRequired(string displayText, out string paymentCode) Parameters Type Name Description System.String displayText Text to display. System.String paymentCode The payment code for the card / transaction. Returns Type Description System.Boolean true if the transaction should continue with the supplied payment code, false to abort the transaction. Remarks Some cards can be configured such that they require a payment code to be entered. If this is the case then this method is called. The cardholder should know the payment code, and a text prompt for the cashier is provided in displayText . The ECR should provide the payment code in the paymentCode parameter. Normally the ECR should return true from this method, indicating that the setting of paymentCode is valid. If the ECR returns false then the library will abort the current transaction. The payment application on the terminal will know what the expected payment code length will be. If the supplied code is not valid then the terminal may ask for the payment application to be re-entered. Examples public bool PaymentCodeRequired(string displayText, out string paymentCode) { bool result = false; paymentCode = null; TextEntry pc = new TextEntry(\"Payment code\", displayText); if (pc.ShowDialog() == DialogResult.OK) { paymentCode = pc.EnteredText; result = true; } return result; } PrintReceipt(ReceiptData) Called when a receipt is to be handled. Customer and merchant receipts are handled separately, so this method may be called more than once in a transaction. Declaration void PrintReceipt(ReceiptData receipt) Parameters Type Name Description ReceiptData receipt Receipt data Remarks Most transactions will require two receipts to be printed, one for the cardholder and one for the merchant. Each receipt is printed using a call to PrintReceipt and all the data required to produce the receipt is in the ReceiptData class instance that is passed as a parameter. Some transaction will only involve a single receipt, e.g. transactions that are declined will only produce a cardholder receipt. It is also possible for receipts to be produced in other situations, e.g. if the terminal loses power during a transaction then it should attempt to print a receipt for the transaction that was in progress once connectivity has been restored. Also, the receipts may not always be sent at the end of a transaction. If, for example, the transaction is being authorised by signature then one receipt, the one that is to be signed, will be produced earlier and the outcome of the transaction will then depend on whether that signature is correct or not. Note : a receipt will only be printed after a card has been accepted. If a transaction is cancelled before a card is accepted then there will be no receipt. Note : when PrintReceipt is called during a transaction then it is recommended to store the receipt data until the transaction is complete. The receipts can be printed when the method is called, the information in the receipt data will probably be useful for reporting once the transaction is complete. Note : If a transaction is partly completed, e.g. at PIN entry, and the terminal loses power then when the terminal restarts PrintReceipt will be called after the ECR has logged in. The ECR must, therefore, be able to handle PrintReceipt outside of the context of an active transaction. Examples public void PrintReceipt(ReceiptData rcpt) { Log(LogLevel.Status, \"Receipt\"); LogFixedWidth(rcpt.GenerateSimpleReceipt(32)); } PrintReport(String) Called when a report is sent from the terminal Declaration void PrintReport(string report) Parameters Type Name Description System.String report Text of the report Remarks The terminal can produce reports, e.g. transaction summaries or configuration details. These are presented as a single string where each line is separated by a newline character ( \\n ). The ECR can, of course, choose to save these reports to disk or show them on screen rather than print them. Examples public void PrintReport(string report) { Log(LogLevel.Status, \"Report\"); LogFixedWidth(report); } VatAmountRequired(String, out Decimal) Called when a VAT amount is required. Declaration bool VatAmountRequired(string displayText, out decimal vatAmount) Parameters Type Name Description System.String displayText Text to display. System.Decimal vatAmount The VAT amount of the transaction. Returns Type Description System.Boolean true if the transaction should continue with the supplied VAT amount, false to abort the transaction. Remarks Some cards can be configured such that they require a VAT / sales tax amount to be provided. If this is the case then this method is called. A text prompt for the cashier is provided in displayText . The VAT amount of the transaction should be provided in the vatAmount parameter. Normally the ECR should return true from this method, indicating that the setting of vatAmount is valid. If the ECR returns false then the library will abort the current transaction. Examples public bool VatAmountRequired(string displayText, out decimal vatAmount) { bool result = false; vatAmount = 0; TextEntry vat = new TextEntry(\"VAT amount\", displayText); if (vat.ShowDialog() == DialogResult.OK) { decimal.TryParse(vat.EnteredText, out vatAmount); result = true; } return result; } VerifySignature(String, out Boolean) Called when the cardholder signature has to be verified. Declaration bool VerifySignature(string displayText, out bool signatureOk) Parameters Type Name Description System.String displayText Text to display. System.Boolean signatureOk Set to true if the signature is valid or false if the signature is not valid. Returns Type Description System.Boolean true if the transaction should continue, false to abort the transaction. Remarks Cardholders may have the option to verify their identity using signature rather than by PIN entry. If signature verification is used then this method will be called. A text prompt for the cashier is provided in displayText. If the signature is valid then the ECR should set signatureOk to true , otherwise signatureOk should be set to false . Normally the ECR should return true from this method, indicating that the setting of signatureOk is valid. If the ECR returns false then the library will abort the current transaction. The ECR can implement signature verification such that it always approves the signature (i.e. signatureOk is set to true and the method returns true) when this method is called, but then ensure that the signature is checked at the end of the transaction. The transaction can then be reversed if the signature is not valid. Examples public bool VerifySignature(string displayText, out bool signatureOk) { Display(displayText); signatureOk = MessageBox.Show(\"Signature OK?\", \"Verify signature\", MessageBoxButtons.YesNo) == DialogResult.Yes; return true; }"
  },
  "api/Westpay.Epas.LoginResponse.html": {
    "href": "api/Westpay.Epas.LoginResponse.html",
    "title": "Class LoginResponse",
    "keywords": "Class LoginResponse The LoginResponse class encapsulates the result of a login request Inheritance System.Object SimpleResponse LoginResponse Inherited Members SimpleResponse.Result SimpleResponse.ErrorCondition SimpleResponse.AdditionalInformation System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class LoginResponse : SimpleResponse Fields LoggedIn If set to true then the ECR has logged in to the terminal. Declaration public readonly bool LoggedIn Field Value Type Description System.Boolean Remarks If true , the login request was successful. Otherwise the login request failed and further details can be found in the ErrorCondition and AdditionalInformation properties. Methods ToString() String representation for debugging Declaration public override string ToString() Returns Type Description System.String Summary of the response Overrides SimpleResponse.ToString()"
  },
  "api/Westpay.Epas.LogLevel.html": {
    "href": "api/Westpay.Epas.LogLevel.html",
    "title": "Enum LogLevel",
    "keywords": "Enum LogLevel Logging levels. A production build of the client library will not issue debug level logging. Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum LogLevel Fields Name Description Debug Log level for debug updates, indicating useful information to clients in the development phase Error Log level for error updates, indicating some fault or unexpected behaviour Status Log level for status updates, indicating significant or relevant pieces of information"
  },
  "api/Westpay.Epas.LogoutResponse.html": {
    "href": "api/Westpay.Epas.LogoutResponse.html",
    "title": "Class LogoutResponse",
    "keywords": "Class LogoutResponse The LogoutResponse class encapsulates the result of a logout request Inheritance System.Object SimpleResponse LogoutResponse Inherited Members SimpleResponse.Result SimpleResponse.ErrorCondition SimpleResponse.AdditionalInformation System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class LogoutResponse : SimpleResponse Fields LoggedOut If set to true then the ECR has logged out of the terminal. Declaration public bool LoggedOut Field Value Type Description System.Boolean Methods ToString() String representation for debugging Declaration public override string ToString() Returns Type Description System.String Summary of the response Overrides SimpleResponse.ToString()"
  },
  "api/Westpay.Epas.OperatingParameters.html": {
    "href": "api/Westpay.Epas.OperatingParameters.html",
    "title": "Class OperatingParameters",
    "keywords": "Class OperatingParameters Parameters related to terminal operations and transactions. Inheritance System.Object OperatingParameters Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class OperatingParameters Fields EnableTip Indicates if tipping is enabled in purchase transactions. Declaration public bool EnableTip Field Value Type Description System.Boolean true if tipping should be enabled, false if it should be disabled. The default is false . Remarks The ECR can set this to true to enable tipping or false to disable tipping. Tipping only applies to purchase transactions. Note that tipping functionality must also be enabled in the terminal configuration before it will be active. This setting is more useful to disable tipping when it is enabled in configuration. LogXmlMessages Set this to true to make the library log EPAS XML messages with the ECR. Declaration public bool LogXmlMessages Field Value Type Description System.Boolean Set to true to make the library log EPAS messages. Remarks If set to true, the this property causes the incoming and outgoing XML messages that make up the EPAS protocol to be logged with the ECR at debug level. TransactionCurrency Defines the currency to be used in transactions. This must match the currency that is configured in the terminal. Declaration public CurrencyCodes TransactionCurrency Field Value Type Description CurrencyCodes The currency. The default is SEK Remarks This property defines the currency that will be specified in EPAS messaging. In normal use this must match the currency that is configured in the terminal. It is possible, however, for the terminal to be configured to accept transactions in different currencies, in which case the transaction currency here must be one of those that are configured. WaitForCardRemoval Controls whether the terminal should wait for a chip card to be taken before reporting the transaction result. Declaration public bool WaitForCardRemoval Field Value Type Description System.Boolean true if the terminal should wait for the card to be removed. The default is false . Remarks This property controls whether the terminal will wait for an inserted chip card to be removed before it sends the transaction response back, or if it sends the response before the card is taken. Setting this to false can make the transaction feel faster, since the result is available sooner. But setting this to true makes it less likely that the customer will leave their card in the terminal by mistake. Regardless of this setting the terminal will not allow a new transaction until the card has been taken. Properties StorageDirectory Defines a directory where log data from the terminal can be stored, and which will be used for temporary files in some situations. My be fully accessible to the client library. The user's temporary folder is the default for this. Declaration public string StorageDirectory { get; set; } Property Value Type Description System.String A path to a directory."
  },
  "api/Westpay.Epas.PurchaseTransactionAmounts.html": {
    "href": "api/Westpay.Epas.PurchaseTransactionAmounts.html",
    "title": "Class PurchaseTransactionAmounts",
    "keywords": "Class PurchaseTransactionAmounts Encapsulates the amounts involved in a purchase transaction Inheritance System.Object PurchaseTransactionAmounts Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class PurchaseTransactionAmounts Constructors PurchaseTransactionAmounts(Decimal) Constructor for a transaction with no cashback amount Declaration public PurchaseTransactionAmounts(decimal purchaseAmount) Parameters Type Name Description System.Decimal purchaseAmount Value of goods or service being purchased PurchaseTransactionAmounts(Decimal, Decimal) Constructor for a transaction with both purchase and cashback amounts Declaration public PurchaseTransactionAmounts(decimal purchaseAmount, decimal cashbackAmount) Parameters Type Name Description System.Decimal purchaseAmount Value of goods or service being purchased System.Decimal cashbackAmount Cashback value Fields CashbackAmount Cashback value, if required Declaration public decimal CashbackAmount Field Value Type Description System.Decimal PurchaseAmount Value of goods or service being purchased Declaration public decimal PurchaseAmount Field Value Type Description System.Decimal Properties TotalAmount The total amount of the purchase transaction Declaration public decimal TotalAmount { get; } Property Value Type Description System.Decimal Methods ToString() String representation of the amount Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Westpay.Epas.ReceiptData.AuthorisationData.html": {
    "href": "api/Westpay.Epas.ReceiptData.AuthorisationData.html",
    "title": "Class ReceiptData.AuthorisationData",
    "keywords": "Class ReceiptData.AuthorisationData Data relating to the authorisation part of the transaction Inheritance System.Object ReceiptData.AuthorisationData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class AuthorisationData Properties ApprovalCode If the transaction was approved, this is the approval code issued by the authorising entity. Declaration public string ApprovalCode { get; } Property Value Type Description System.String CardholderVerificationMethod The cardholder verification method used Declaration public VerificationMethod CardholderVerificationMethod { get; } Property Value Type Description VerificationMethod Remarks Note that there are specific receipt guidelines around the ConsumerDevice method. Swedbank Contactless Bulletin v1.0 R5 says that if the cardholder verification is done in the device then the receipt should indicate that offline PIN was used. Channel The authorisation channel used Declaration public AuthorisationChannel Channel { get; } Property Value Type Description AuthorisationChannel FinancialInstitution The three-letter financial institution code. Declaration public string FinancialInstitution { get; } Property Value Type Description System.String Responder The authorisation method used Declaration public AuthorisingEntity Responder { get; } Property Value Type Description AuthorisingEntity ResponseCode The authorisation response code Declaration public string ResponseCode { get; } Property Value Type Description System.String Remarks This is the code that was returned from the authorisation process to indicate the result of the authorisation. The code is documented in the CHAOI specification, section 8.1.6. VerifiedByDevice Indicates that the cardholder verification was performed in a separate device Declaration public bool VerifiedByDevice { get; } Property Value Type Description System.Boolean Remarks Examples of these are ApplePay, GooglePay, etc., where the cardholder verification does not involve the terminal. Methods PinUsed() Returns true if the verification method indicates that a PIN was used Declaration public bool PinUsed() Returns Type Description System.Boolean True if PIN was used, false otherwise Remarks The receipt guidelines indicate that “PIN USED” should be included in the receipt in these cases. SignatureRequired() Returns true if the verification method indicates that a signature is required Declaration public bool SignatureRequired() Returns Type Description System.Boolean True if signature is required, false otherwise Remarks In these cases the merchant receipt should include a space for the signature to be written."
  },
  "api/Westpay.Epas.ReceiptData.CardData.html": {
    "href": "api/Westpay.Epas.ReceiptData.CardData.html",
    "title": "Class ReceiptData.CardData",
    "keywords": "Class ReceiptData.CardData Card details Inheritance System.Object ReceiptData.CardData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class CardData Properties CardName The card name Declaration public string CardName { get; } Property Value Type Description System.String Remarks Note! The CardName here is not suitable for identifying the card type or the issuer. The card name can come from various sources, but it is normally the product name that is encoded on the card itself. It can contain whatever text the issuer chooses to place there, so there is no guarantee that “Visa” or “MasterCard” will actually appear there. CardPresentation The method used to present the card to the terminal Declaration public EntryMethod CardPresentation { get; } Property Value Type Description EntryMethod MaskedCardNumber The masked card number provided in the merchant receipt from the terminal Declaration public string MaskedCardNumber { get; } Property Value Type Description System.String Remarks In cardholder receipts the card number is masked to only show the last four digits. In merchant receipts the card number is masked to show the first six and last four digits. PaymentCode The payment code is the code that was provided by the ECR. Declaration public string PaymentCode { get; } Property Value Type Description System.String See Also PaymentCodeRequired(String, out String)"
  },
  "api/Westpay.Epas.ReceiptData.DccData.html": {
    "href": "api/Westpay.Epas.ReceiptData.DccData.html",
    "title": "Class ReceiptData.DccData",
    "keywords": "Class ReceiptData.DccData The DCC class instance is included if Direct Currency Conversion was selected by the cardholder for the transaction. Inheritance System.Object ReceiptData.DccData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class DccData Remarks The ECR can use the pre-set disclaimer text in the Disclaimer property, or it can use the various elements to create a disclaimer text. Properties Amount Transaction amount in the cardholder's currency Declaration public decimal Amount { get; } Property Value Type Description System.Decimal CardScheme Indicates the card scheme used in the DCC transaction. This is a string to allow for future expansion. Declaration public string CardScheme { get; } Property Value Type Description System.String Remarks The value here is based on configuration data in the terminal, and there is scope for the range of values to expand over time, therefore this property is a string rather than an enumeration. At time of writing, possible values are: “V”: A Visa card was used. “M”: A MasterCard card was used. This is significant because the disclaimer text changes depending on the card scheme. The disclaimer text also changes depending on the transaction type and the DCC provider. if the ECR needs to use a different disclaimer text then it must take these different factors into account. Disclaimer Disclaimer text that must be included in the receipt. Declaration public string Disclaimer { get; } Property Value Type Description System.String Remarks The DCC text is always presented in English. The text contains the required elements, but does not include the MarkUpDescription property, which must be printed if provided Exponent Number of digits that follow the decimal point in the converted currency Declaration public int Exponent { get; } Property Value Type Description System.Int32 IsoCurrencyCode ISO 4217 currency code of the converted currency Declaration public string IsoCurrencyCode { get; } Property Value Type Description System.String IsoCurrencyNumber ISO 4217 currency number of the converted currency Declaration public int IsoCurrencyNumber { get; } Property Value Type Description System.Int32 MarkUp The conversion charge / mark up as a percentage. This is included in the total. Declaration public decimal MarkUp { get; } Property Value Type Description System.Decimal MarkUpDescription Text description of the MarkUp charge, required by some DCC providers. If set, this should be printed on the line after the MarkUp value. Declaration public string MarkUpDescription { get; } Property Value Type Description System.String Provider DCC rate provider Declaration public string Provider { get; } Property Value Type Description System.String Rate Conversion rate Declaration public decimal Rate { get; } Property Value Type Description System.Decimal RateTimestamp The timestamp when the rate was calculated Declaration public DateTime RateTimestamp { get; } Property Value Type Description System.DateTime Source DCC rate source Declaration public string Source { get; } Property Value Type Description System.String Tip The value of any added tip, given in the converted currency. Declaration public decimal Tip { get; } Property Value Type Description System.Decimal"
  },
  "api/Westpay.Epas.ReceiptData.EmvData.html": {
    "href": "api/Westpay.Epas.ReceiptData.EmvData.html",
    "title": "Class ReceiptData.EmvData",
    "keywords": "Class ReceiptData.EmvData The EmvData class instance is included if the card used involved EMV data. Inheritance System.Object ReceiptData.EmvData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class EmvData Properties ApplicationId The EMV application ID (AID) identifies the chip application that was used in the transaction. This should be included in the receipt. Declaration public string ApplicationId { get; } Property Value Type Description System.String TerminalVerificationResults he terminal verification results (TVR) property is a sequence of ten hex digits that provide verification information about an EMV transaction. This should be included in the receipt. Declaration public string TerminalVerificationResults { get; } Property Value Type Description System.String TransactionStatusIndicator TThe transaction status indicator (TSI) is a sequence of four hex digits that provide status information about an EMV transaction. This should be included in the receipt. Declaration public string TransactionStatusIndicator { get; } Property Value Type Description System.String Methods CompactReceiptText() Helper method to generate the EMV receipt block over two lines Declaration public string CompactReceiptText() Returns Type Description System.String AID on one line, and the TVR and TSI on the next line LongReceiptText() Helper method to generate the EMV receipt block over three lines Declaration public string LongReceiptText() Returns Type Description System.String AID, TVR and TSI on separate lines"
  },
  "api/Westpay.Epas.ReceiptData.html": {
    "href": "api/Westpay.Epas.ReceiptData.html",
    "title": "Class ReceiptData",
    "keywords": "Class ReceiptData Container class for all the data required to print a receipt Inheritance System.Object ReceiptData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class ReceiptData Fields AmountFormatSpecifier When amounts are converted to text the conversion will use this format specifier as the C# Decimal.ToString method's format parameter. The default is \"F2\", i.e. floating point with two decimal places. This can be changed to reflect the operating culture of the software. Declaration public string AmountFormatSpecifier Field Value Type Description System.String Outcome The transaction outcome Declaration public TransactionOutcome Outcome Field Value Type Description TransactionOutcome Version Indicates the receipt version, i.e. the merchant version or the cardholder version Declaration public ReceiptVersion Version Field Value Type Description ReceiptVersion Properties AcquirerReference The acquirer reference number Declaration public string AcquirerReference { get; } Property Value Type Description System.String Remarks Used in the receipt header. Authorisation Contains data relating to the transaction authorisation. Declaration public ReceiptData.AuthorisationData Authorisation { get; } Property Value Type Description ReceiptData.AuthorisationData BankAgent The name of the bank agent Declaration public string BankAgent { get; } Property Value Type Description System.String Remarks Used in the receipt header. Card Contains details of the card used in the transaction. Declaration public ReceiptData.CardData Card { get; } Property Value Type Description ReceiptData.CardData CardholderLanguage The cardholder language as a two-character ISO 639-1 code. Client software can use this to customise receipts. Declaration public string CardholderLanguage { get; } Property Value Type Description System.String DCC Contains the DCC data, if chosen by the customer. Declaration public ReceiptData.DccData DCC { get; } Property Value Type Description ReceiptData.DccData EMV Contains EMV data elements if an EMV card was used in the transaction. Declaration public ReceiptData.EmvData EMV { get; } Property Value Type Description ReceiptData.EmvData MerchantDetails Contains details relating to the merchant. Declaration public ReceiptData.MerchantData MerchantDetails { get; } Property Value Type Description ReceiptData.MerchantData OperatorID Contains the cashier / operator ID, which is provided originally by the ECR in the terminal’s operating parameters (see OperatorId ). Declaration public string OperatorID { get; } Property Value Type Description System.String Remarks Used in the receipt header. TerminalID Contains the terminal ID, which is provided originally by the ECR in the terminal’s operating parameters. Declaration public string TerminalID { get; } Property Value Type Description System.String Remarks Used in the receipt header. Transaction Contains the details of the financial transaction. Declaration public ReceiptData.TransactionData Transaction { get; } Property Value Type Description ReceiptData.TransactionData Methods CodeString() Helper method to generate the code string that appears in the receipt. Declaration public string CodeString() Returns Type Description System.String Remarks The code string is defined in the Cardholder and Operator Interface specification (CHAOI), section 8.3.1, where the example given is “C@1 5 000 SVB 012 12233”. The meaning of each of these elements is discussed in section 8 of the CHAOI specification. GenerateSimpleReceipt(Int32) Generates a formatted receipt with a fixed-width layout. Declaration public string GenerateSimpleReceipt(int receiptFixedWidthChars) Parameters Type Name Description System.Int32 receiptFixedWidthChars Width of the receipt in characters Returns Type Description System.String A formatted string containing the receipt Remarks Note! This is intended for debug and development purposes, therefore the formatting of this receipt is not modifiable. It may not be appropriate for all uses and situations. Users should satisfy themselves that the receipt is correct for all the combinations of transactions types, outcomes, and parameters before choosing to use this in a production environment. GetTranslatedText(ReceiptData.TranslatedTextId, String) Returns the text related to the text ID provided, translated to the cardholder's language. Declaration public string GetTranslatedText(ReceiptData.TranslatedTextId textId, string suffix = null) Parameters Type Name Description ReceiptData.TranslatedTextId textId ID of the text to retrieve System.String suffix Optional suffix. This can be used for formatting purposes, e.g. to add \":\" after a label Returns Type Description System.String Translated text, or null if there is no translation found"
  },
  "api/Westpay.Epas.ReceiptData.MerchantData.html": {
    "href": "api/Westpay.Epas.ReceiptData.MerchantData.html",
    "title": "Class ReceiptData.MerchantData",
    "keywords": "Class ReceiptData.MerchantData Contains details of the merchant. These are taken from the terminal’s configuration data, and it is reasonable for the ECR to ignore these values and use merchant details that are configured directly in the ECR. Inheritance System.Object ReceiptData.MerchantData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class MerchantData Properties Address Merchant street address Declaration public string Address { get; } Property Value Type Description System.String City Merchant's town or city Declaration public string City { get; } Property Value Type Description System.String Name Merchant name Declaration public string Name { get; } Property Value Type Description System.String OrganisationNumber Merchant's organisation number Declaration public string OrganisationNumber { get; } Property Value Type Description System.String PhoneNumber Merchant's phone number Declaration public string PhoneNumber { get; } Property Value Type Description System.String Zip Merchant's postal or zip code Declaration public string Zip { get; } Property Value Type Description System.String Methods MerchantSummary() Helper method to create a summary of the merchant details Declaration public string MerchantSummary() Returns Type Description System.String"
  },
  "api/Westpay.Epas.ReceiptData.TransactionData.html": {
    "href": "api/Westpay.Epas.ReceiptData.TransactionData.html",
    "title": "Class ReceiptData.TransactionData",
    "keywords": "Class ReceiptData.TransactionData The TransactionData class contains data elements describing the transaction Inheritance System.Object ReceiptData.TransactionData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class TransactionData Properties AdditionalCharges Added charges, typically for a cash advance transaction Declaration public decimal AdditionalCharges { get; } Property Value Type Description System.Decimal AlternativePaymentMethod Identifies an alternative payment method that was used. Declaration public string AlternativePaymentMethod { get; } Property Value Type Description System.String Remarks An alternative payment method is where the normal card process was not used, and instead the customer paid by other means. At time of writing the only supported alternative payment method is Swish, in which case the value here will be “Swish”. Cashback Cashback amount Declaration public decimal Cashback { get; } Property Value Type Description System.Decimal IsoCurrencyCode Three-letter ISO 4217 currency code for the transaction Declaration public string IsoCurrencyCode { get; } Property Value Type Description System.String Remarks This code is derived from the transaction currency code that is set in the operating parameters (see TransactionCurrency ). The code can be used without modification on the receipt, or the ECR can work out formatting parameters based on the currency selection. NetAmount The value of the transaction, without cashback, tip, or charges included. The VAT value, is part of the net amount. Declaration public decimal NetAmount { get; } Property Value Type Description System.Decimal Reference The transaction reference assigned by the terminal. This is used if the transaction must be reversed. Declaration public string Reference { get; } Property Value Type Description System.String Remarks Used in the receipt header. See Also TransactionReference Timestamp Time of the transaction, according to the terminal Declaration public DateTime Timestamp { get; } Property Value Type Description System.DateTime Remarks Used in the receipt header. Tip The value of the tip, if added by the customer Declaration public decimal Tip { get; } Property Value Type Description System.Decimal Total The total of the net amount, cashback amount, tip, and additional charges. Declaration public decimal Total { get; } Property Value Type Description System.Decimal TxnType Transaction type Declaration public TransactionType TxnType { get; } Property Value Type Description TransactionType Vat VAT amount if specified, already included in the Net Amount Declaration public decimal Vat { get; } Property Value Type Description System.Decimal"
  },
  "api/Westpay.Epas.ReceiptData.TranslatedTextId.html": {
    "href": "api/Westpay.Epas.ReceiptData.TranslatedTextId.html",
    "title": "Enum ReceiptData.TranslatedTextId",
    "keywords": "Enum ReceiptData.TranslatedTextId The terminal will provide receipt texts that are translated to the customer's chosen language. These texts are referenced by the following IDs Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum TranslatedTextId Fields Name Description AcquirerFee Additional acquirer fee AcquirerReferenceNumber Row header for the acquirer reference number ApprovalMessage Text such as \"AUTHORISATION FOR CREDITING ABOVE ACCOUNT\" that applies to signature bars CashbackAmount Row header for the cashback amount CashierId Row header for the cashier / operator ID CashierName Prompt for the cashier's name in a refund transaction CashierSignature Prompt for the cashier's signature in a refund transaction Contactless Text that indicates a contactless transaction DebitOrCredit Some older cards require the cardholder to choose between their debit or credit account. If that choice is made then the appropriate translation will be provided. If the choice did not apply then no translation is provided. DenialReason If the transaction was declined this text provides added information on the reason OrganisationNumber Row header for the organisation number Outcome The transaction outcome, i.e. approved, declined or cancelled PaymentCode Payment code, may be required by the payment card and is provided by the ECR PinUsed Text that indicates a PIN was used RecipientTag Typically \"cardholder copy\" or \"merchant copy\", to show the merchant which receipt is being printed ReferenceNumber Row header for the transaction reference Sign Text that indicates the receipt should be signed by the customer TerminalId Row header for the terminal ID Total Row header for total amount of the transaction TransactionType Transaction type, e.g. \"purchase\", \"refund\", etc. VATAmount Row header for the VAT amount VerifiedByDevice Text that indicates the customer identity was verified by a consumer device, e.g. a mobile phone"
  },
  "api/Westpay.Epas.ReceiptVersion.html": {
    "href": "api/Westpay.Epas.ReceiptVersion.html",
    "title": "Enum ReceiptVersion",
    "keywords": "Enum ReceiptVersion Indicates the intended recipient of a receipt Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum ReceiptVersion Fields Name Description Cardholder Receipt is for the cardholder Merchant Receipt is for the merchant / retailer"
  },
  "api/Westpay.Epas.SimpleResponse.html": {
    "href": "api/Westpay.Epas.SimpleResponse.html",
    "title": "Class SimpleResponse",
    "keywords": "Class SimpleResponse Base class for responses that will be sent back on the API Inheritance System.Object SimpleResponse AdminResponse EnableReadersResponse LoginResponse LogoutResponse TransactionResponse Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class SimpleResponse Fields Result The result of the request. The meaning of this is dependent on the request that is being handled. Declaration protected bool Result Field Value Type Description System.Boolean Properties AdditionalInformation Additional diagnostic text detail. For logging purposes only. Declaration public string AdditionalInformation { get; protected set; } Property Value Type Description System.String Remarks The terminal may provide additional diagnostic information in the AdditionalInformation property. This is intended for debug and logging purposes. The text in here is not translated and is not useful for a cashier or customer. ErrorCondition Specific error condition that might show why a request failed Declaration public ErrorConditions ErrorCondition { get; protected set; } Property Value Type Description ErrorConditions Methods ToString() String representation for debugging Declaration public override string ToString() Returns Type Description System.String Summary of the response Overrides System.Object.ToString()"
  },
  "api/Westpay.Epas.TerminalEnvironment.html": {
    "href": "api/Westpay.Epas.TerminalEnvironment.html",
    "title": "Class TerminalEnvironment",
    "keywords": "Class TerminalEnvironment Encapsulates terminal's operating environment and major parameters Inheritance System.Object TerminalEnvironment Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class TerminalEnvironment Constructors TerminalEnvironment() Constructor Declaration public TerminalEnvironment() Fields AuthorisationServer Connection details of the authorisation server. This is optional and if left null the terminal will use the authorisation server details that it obtains from the configuration server. Declaration public IPEndPoint AuthorisationServer Field Value Type Description System.Net.IPEndPoint Remarks The authorisation server is the server that the terminal will communicate with to authorise transactions. If this is left as null then the terminal will use the authorisation server details found in the downloaded configuration files. In normal usage the ECR should set this property to identify the correct server details if possible. ConfigurationServer Connection details of the configuration server Declaration public IPEndPoint ConfigurationServer Field Value Type Description System.Net.IPEndPoint LangDanish ISO639-1 two-character language code for Danish Declaration public const string LangDanish = \"da\" Field Value Type Description System.String LangEnglish ISO639-1 two-character language code for English Declaration public const string LangEnglish = \"en\" Field Value Type Description System.String LangFinnish ISO639-1 two-character language code for Finnish Declaration public const string LangFinnish = \"fi\" Field Value Type Description System.String LangGerman ISO639-1 two-character language code for German Declaration public const string LangGerman = \"de\" Field Value Type Description System.String LangNorwegian ISO639-1 two-character language code for Norwegian Declaration public const string LangNorwegian = \"no\" Field Value Type Description System.String LangPolish ISO639-1 two-character language code for Polish Declaration public const string LangPolish = \"pl\" Field Value Type Description System.String LangSwedish ISO639-1 two-character language code for Swedish Declaration public const string LangSwedish = \"sv\" Field Value Type Description System.String OperatorId Operator / cashier ID Declaration public string OperatorId Field Value Type Description System.String Remarks The operator ID identifies the cashier. This is not used by the terminal, but the value given is included in the receipt data for transactions. TerminalId Terminal ID Declaration public string TerminalId Field Value Type Description System.String An 8-digit terminal ID Remarks The Terminal ID is assigned by the terminal provider. The ID is used by the terminal to download configuration data, to identify itself in transactions, and to provide traceability in the case of transaction investigations. This property must be set by the ECR . Properties ISO639_1_LanguageCode ISO639-1 two-letter language code that identifies the ECR's operating language. The constant strings, e.g. LangSwedish , LangEnglish , etc., can be used here. Declaration public string ISO639_1_LanguageCode { get; set; } Property Value Type Description System.String The default is LangSwedish Remarks This property selects the language that the ECR texts should be translated to. The TerminalEnvironment class defines several language constants that can be used here: LangSwedish LangDanish LangEnglish LangFinnish LangGerman LangNorwegian LangPolish"
  },
  "api/Westpay.Epas.TerminalNetworkConnection.html": {
    "href": "api/Westpay.Epas.TerminalNetworkConnection.html",
    "title": "Class TerminalNetworkConnection",
    "keywords": "Class TerminalNetworkConnection Encapsulates all that is needed to create a network connection to a terminal Inheritance System.Object TerminalNetworkConnection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class TerminalNetworkConnection Fields TerminalConnectionDetails Connection details to access the terminal Declaration public IPEndPoint TerminalConnectionDetails Field Value Type Description System.Net.IPEndPoint Remarks The TerminalConnectionDetails property specifies the network address and port of the terminal. At time of writing the terminal only supports IPv4 connections. Note : The default port for EPAS is 3000 . This can be changed in the terminal, but there is usually no reason to do so. UseKeepAlive Indicates if a network keepalive message should be sent regularly. This is useful on reliable network connections, since the terminal will detect a break in these messages and will know that the ECR has gone offline. This allows the terminal to handle the failure gracefully. Declaration public bool UseKeepAlive Field Value Type Description System.Boolean The default is false Remarks If the UseKeepAlive method is true then the EPAS client library will ensure a steady stream of packets are sent to the terminal during idle times. This will allow the terminal to know that the ECR is still alive and connected."
  },
  "api/Westpay.Epas.TransactionOutcome.html": {
    "href": "api/Westpay.Epas.TransactionOutcome.html",
    "title": "Enum TransactionOutcome",
    "keywords": "Enum TransactionOutcome Indicates the result of a transaction Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum TransactionOutcome Fields Name Description Approved The transaction was approved. Cancelled The transaction was cancelled, either by the cardholder or by the ECR. Declined The transaction was declined, either by the authorisation host or by the terminal."
  },
  "api/Westpay.Epas.TransactionResponse.html": {
    "href": "api/Westpay.Epas.TransactionResponse.html",
    "title": "Class TransactionResponse",
    "keywords": "Class TransactionResponse The TransactionResponse class encapsulates the result of a purchase, refund or cash advance request Inheritance System.Object SimpleResponse TransactionResponse Inherited Members SimpleResponse.Result SimpleResponse.ErrorCondition SimpleResponse.AdditionalInformation System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public class TransactionResponse : SimpleResponse Fields Approved If this is true, then the transaction was approved. Otherwise, the ErrorCondition , and AdditionalInformation properties will give more detail on why the transaction was not approved. Declaration public bool Approved Field Value Type Description System.Boolean FinalAmount The total amount that was used in the transaction. Note that for a purchase this may be more than the original requested amount due to charges or tipping that were added during the transaction. Declaration public decimal FinalAmount Field Value Type Description System.Decimal Remarks The transaction amount may also be affected by DCC, if it was applied during the transaction, see DCC . The breakdown of the final transaction amount is given in the receipt data, see ReceiptData.TransactionData . TransactionReference The transaction reference is assigned by the terminal. It identifies the transaction and is required for a reversal, as well as for any post-transaction checks or queries that might arise. Declaration public string TransactionReference Field Value Type Description System.String Methods ToString() String representation for debugging Declaration public override string ToString() Returns Type Description System.String Summary of the response Overrides SimpleResponse.ToString()"
  },
  "api/Westpay.Epas.TransactionType.html": {
    "href": "api/Westpay.Epas.TransactionType.html",
    "title": "Enum TransactionType",
    "keywords": "Enum TransactionType Transaction types Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum TransactionType Fields Name Description CashAdvance Cash advance transaction Purchase Purchase transaction, with or without cashback. PurchaseReversal Reversal of a purchase transaction Refund Refund / return transaction RefundReversal Reversal of a refund transaction Unknown It is possible that a future update of the payment application on the terminal could result in an unrecognised transaction type, in which case Unknown will be indicated."
  },
  "api/Westpay.Epas.VerificationMethod.html": {
    "href": "api/Westpay.Epas.VerificationMethod.html",
    "title": "Enum VerificationMethod",
    "keywords": "Enum VerificationMethod Cardholder verification methods Namespace : Westpay.Epas Assembly : EpasClientLibrary.dll Syntax public enum VerificationMethod Remarks The character enumeration values for each of these corresponds to the associated code in the CHAOI specification, section 8.1.3. Fields Name Description Combined A combined CVM rule has been performed (signature and offline PIN) ConsumerDevice Cardholder was verified by a consumer device, e.g. a mobile phone. NOTE: the actual verification method printed on the receipt should be 'a' for PINOffline, according to Swedbank rules. Also, according to Visa, there must be a text saying \"VERIFIED BY DEVICE\". CVMFailed Cardholder verification failed NoCVM The specific 'No CVM' rule was performed NoVerification No cardholder verification was performed in the terminal PINOffline Cardholder was verified by offline PIN PINOnline Cardholder was verified by online PIN Signature Cardholder was verified by signature"
  },
  "articles/additional.html": {
    "href": "articles/additional.html",
    "title": "Additional functionality",
    "keywords": "Additional functionality The functionality described here is not specifically related to transactions. Administrative operations API reference ApiResult RequestAdministrativeOperation(AdminOperation operation, out AdminResponse response) An administrative operation is one that has a very specific purpose in the terminal. In all cases, if the request returns ApiResult.OK then the response from the terminal is found in the response parameter. The operations currently supported are: HostLogin UpdateParameters The AdminResponse class contains the result of the administrative operation request. Example: /// <summary> /// Download any configuration updates that are available /// </summary> public void DoConfigUpdate() { AdminResponse response; ApiResult result = mEpas.RequestAdministrativeOperation(AdminOperation.UpdateParameters, out response); LogApiResult(result, \"Configuration update: \" + response?.ToString()); } SendRawXml API reference ApiResult SendRawXml(string xml) EpasClient.RawMessageHandler gives the ECR the option, if required, to handle raw EPAS XML message as they are received from the terminal. This method is the counterpart to that functionality, and it provides the ECR with a way to send a raw EPAS XML message to the terminal. This is very much for advanced usage only, since it requires a thorough knowledge of the EPAS protocol."
  },
  "articles/apm.html": {
    "href": "articles/apm.html",
    "title": "Alternative payment methods",
    "keywords": "Alternative payment methods The terminal can support alternative payment methods. When a transaction is initiated, the terminal checks if there are any alternative payment methods installed that can be used in addition to card payment. If so, the terminal will present these as swipe2pay options. To decide if a payment method should be displayed, the current transaction type, amount and other parameters are checked. If an alternative payment method was used for the transaction, the name of the payment method will be supplied in ReceiptData.TransactionData.AlternativePaymentMethod . Request payment method for transaction For payments and refunds, it is possible to request which alternative payment method is wanted for the transaction. If the requested alternative payment method is not available on the terminal, the transaction will be aborted. Note: There is no way to require a payment card to be used for the transaction, if alternative payment methods are enabled on the terminal, they will be available. Available alternative payment methods Available alternative payment methods can change over time and also differ between terminals depending on which methods are available. There is currently no function to get a list of available alternative payment methods from the terminal. At the moment (Q1 2022) we have: “Swish” (Sweden) “Klarna” (Sweden) “Vipps” will soon be available (Norway) “MobilePay” is planned to be available (Denmark, Finland) Refunds If a purchase was made using an alternative payment method, that method must also be used for the Refund. This is due to money laundry regulations. It is the responsibillity of the ECR to supply correct payment method and reference number for the original transaction when requesting a refund."
  },
  "articles/dcc.html": {
    "href": "articles/dcc.html",
    "title": "Dynamic Currency Conversion (DCC)",
    "keywords": "Dynamic Currency Conversion (DCC) The terminal supports DCC. DCC permits the customer to pay an amount that is presented in their own currency, rather than the currency of the merchant. DCC is only possible when: DCC has been configured in the terminal, A chip card is used, The currency on the chip card is different to the merchant’s currency, The card range is enabled for DCC in the terminal, There is no cashback, The transaction is a purchase or refund, The card is not a ‘national’ card. Refunds require special handling, as detailed below. When DCC can apply in a purchase the terminal will make an online request to find out if DCC can be offered. If DCC is available then the cardholder is prompted to choose between the original amount in the merchant currency or the converted amount in their card’s currency. If they choose DCC then the transaction continues in the merchant’s currency, i.e. the transaction currency does not actually change, but the transaction amount is adjusted so that the amount they see on their card statement is the amount that they were shown on screen. DCC affects the ECR in two ways: Disclaimer texts DCC receipts require a DCC disclaimer to be printed on the receipt. The receipt data includes a DCC disclaimer text in English. The disclaimer texts are, however, subject to change. If the DCC provider specifies a new disclaimer text, that change may take some time to be implemented in the terminal. The receipt data, therefore, also includes the individual data elements that allow an ECR to build its own DCC disclaimer text. Disclaimer texts also change according to the card issuer, and according to the transaction type, and even according to who is authorising the transaction. The disclaimer text in the receipt data is valid at the point where the payment application is built, but the disclaimer texts can change over time according to rule changes so the ECR should be aware of its responsibilities here. DCC and refunds When a refund that is made to a card that is eligible for DCC, the ECR must indicate if DCC was performed on the original transaction. This is covered in CheckDccOnOriginalTransaction The intention here is that if a purchase was done using DCC then the refund should also be done using DCC, even though this may mean that the refunded amount may not be the same as the purchase amount, due to exchange rate changes in the time between the two transactions."
  },
  "articles/identifying_cards.html": {
    "href": "articles/identifying_cards.html",
    "title": "Identifying cards",
    "keywords": "Identifying cards In some situations, there is a need to classify the card that is used according to the issuer, e.g. to have a breakdown of how many transactions are with Visa, how many with MasterCard, how many with American Express, etc. The receipt data for a transaction contains a card name, but this is not definitive and should not be used for the purposes of classifying payment cards. The most reliable way to do this is to look at the card IIN (issuer identification number, formerly “ BIN ” or bank identification number), which is the first set of digits in the masked card number , or the application identifier or AID (see ApplicationId ). Note that the AID is specific to EMV technologies, i.e. chip and contactless transactions. Card swipe transactions will only provide the masked card number. Card IIN lookup There are some simple rules for card numbers. In general if it begins with a 4 it is a Visa card, and if it begins with a 5 it is a MasterCard. American Express cards begin with 3. The detail is not so simple, however, and other brands like JCB, UnionPay, Diners Club, etc., have more specific sub-ranges. A good starting point for this subject is https://en.wikipedia.org/wiki/Payment_card_number . AID lookup The Application Identifier is a sequence of hexadecimal letters and numbers. It is formed from two parts, the RID (Registered Application Provider Identifier) and the PIX (Proprietary Application Identifier Extension). The RID is 10 characters long and is normally enough to identify the card issuer. Examples are: A000000003: Visa A000000004: MasterCard A000000025: American Express A000000333: UnionPay A list of RIDs can be found at https://www.eftlab.com/knowledge-base/212-emv-rid . It is a long list, and clients should decide exactly how much detail is needed in the breakdown of issuers. For example, it may be enough to pick the top 5 issuers and then classify everything else as ‘Others’."
  },
  "articles/integrating_the_library.html": {
    "href": "articles/integrating_the_library.html",
    "title": "Integrating the EPAS client library",
    "keywords": "Integrating the EPAS client library The steps to integrate the EPAS Client Library are: Add the library module to the ECR project. Add an instance of the library to the ECR application. Implement required methods. Implement optional handler methods as required. 1. Add a reference to EpasClientLibrary.dll The EPAS Client Library is implemented as a .NET Framework 4.7.2 class library. 2. Create an EpasClient instance The EPAS Client Library is implemented by the EpasClient class in the Westpay.Epas namespace. The client takes a single parameter, which is an instance of a class that implements IClientApp . using Westpay.Epas; public class SampleECR : IClientApp { /// <summary> /// Instance of the EPAS client library /// </summary> EpasClient mEpas = null; public SampleECR() { // Create the EPAS client library instance mEpas = new EpasClient(this); } . . . } Note : An EpasClient instance is only connected to one terminal at a time. If the ECR needs to interact with several terminals simultaneously, one instance must be created for each terminal. 3. Implement IClientApp The EpasClient class requires an IClientApp instance. This instance must be provided by the ECR application, which must implement all the required members of the interface. Display PrintRecipt PrintReport VerifySignature HandleVoiceReferral PaymentCodeRequired VatAmountRequired LoyaltyCardPresented CheckDccOnOriginalTransaction ParameterDownloadAvailable Log 4. Optional methods The client library offers a range of handler methods that are optional, and the ECR can implement any that will be useful. Each handler method is implemented as a callback. The ECR simply assigns a method reference to the appropriate library callback handler in EpasClient and the method will be called when appropriate. BusyStatus CardAccepted CardStatus LinkStatus RawMessageHandler About callbacks When the library calls methods in the ECR, only one method will be called at any time. This is done to ensure that there are no race conditions, since events can happen quickly and it would be confusing if, for example, the CardAccepted handler is called while the CardInserted handler is still executing. It is, therefore, recommended that the ECR returns from interface methods and handlers as quickly as possible so that the remainder of the transaction can be processed without delay. There is one exception to this, which is IClientApp.Log . This has a dedicated thread so that the Log method can be called while another method or handler is executing. Only one call to Log will be made at a time, however – there will be no overlapping calls made. Using the library The next step is to start using the library"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "EPAS Client Library",
    "keywords": "EPAS Client Library Release notes Integrating the EPAS Client Library Using the EPAS Client Library # Additional features Alternative payment methods Dynamic Currency Conversion Identifying cards Log storage Receipts Transaction types Transaction examples"
  },
  "articles/log_storage.html": {
    "href": "articles/log_storage.html",
    "title": "Log storage",
    "keywords": "Log storage The EPAS Client Library will receive logging data from the terminal. This is stored in a series of files named Tracelog.txt , Tracelog_1.txt , up to Tracelog_9.txt . These files are automatically rotated and limited in size. Tracelog.txt is the most recent file. These log files will be useful if there is any unexpected behaviour in the terminal, e.g. a failed transaction or a problematic card. These files are stored by default in the user’s temporary folder. On Windows 10 this is C:\\Users\\<username>\\AppData\\Local\\Temp . The client can specify a more convenient location by modifying the value of StorageDirectory in the library’s Options property, e.g. string storage = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), \"EpasClientLibraryLogs\"); try { Directory.CreateDirectory(storage); mEpas.Options.StorageDirectory = storage; } catch (Exception ex) { Log(\"Unable to use \" + storage + \" for file storage: \" + ex.Message); } This code fragment creates a directory under the users Documents folder and specifies that as the place for the library to store log files."
  },
  "articles/receipts.html": {
    "href": "articles/receipts.html",
    "title": "Receipts",
    "keywords": "Receipts The EPAS implementation in the terminal provides the receipt contents are separate data elements, rather than as a pre-formatted block of text. The reasons for this include: Receipt printers are not limited to fixed-width character sets, so aligning text elements is not a simpler matter of adding spaces. Even if using a fixed-width font, receipt printer widths vary from device to device. A pre-formatted receipt does not allow for receipt elements to be printed in different fonts, e.g. larger or bold text to show the transaction type and amount. • Merchants may wish to use electronic receipts, and therefore need access to individual data elements rather than a pre-formatted receipt. The terminal will issue separate receipts for the customer and merchant, where required. Each receipt is provided by a call to the PrintReceipt method. Recommendations The biggest challenge in receipt handling is in dealing with all the different receipt rules, layouts and contents that may occur. It is strongly recommended to study the Cardholder and Operator Interface specification (document ref 2). This document can be provided by Westpay. Section 8 of that document is dedicated to receipt layouts and contents and it is worth becoming familiar with the receipt layouts and the different factors that are involved. Note, however, that the CHAOI specification is quite old now, and does not contain information relating to contactless card use or off-terminal transaction flows. This section of the API specification aims to explain what data is provided and what it means. The construction of receipts, however, is beyond the scope of this document. The ReceiptData class is provided by the EPAS Client Library, and it contains all the data required to generate a transaction receipt. Most of the data is contained in other classes. See ReceiptData class for more information. Note: The GenerateSimpleReceipt method is intended only for development and debug purposes. The requirements on receipt contents change according to location, environment, and issuer / processor requirements. Developers using the EPAS Client Library should implement the receipt layout that is required for the situation in which the library will be used."
  },
  "articles/release_notes.html": {
    "href": "articles/release_notes.html",
    "title": "Release notes",
    "keywords": "Release notes Version 1.3 Added details on transactions using alternative payment methods Removed AdminOperation .ModeSwitch. Version 1.2.1 28/09/2021 Fixed missing notification in the client library about USB disconnections. Version 1.2 06/07/2021 Added details on serial / USB connection, see ConnectUsb . Added details on OperatingParameters.StorageDirectory . Clarified use of GenerateSimpleReceipt . Moved from .Net Standard 2.0 to .Net Framework 4.7.2. Version 1.1 20/05/2021 Added details on handling refunds of alternative payment methods. Version 1.0 05/05/2021 Initial release"
  },
  "articles/transaction_flows.html": {
    "href": "articles/transaction_flows.html",
    "title": "Transaction flows",
    "keywords": "Transaction flows This section shows some procedural and transaction flow diagrams to help understand a typical sequence of callbacks during a transaction. Connection Client Terminal ConnectNetwork -> <- ConnectNetwork: returns OK <- callback: LinkStatus (True) Login -> <- callback: BusyStatus (True) <- callback: Display (\"Please wait\") <- callback: BusyStatus (False) <- Login: returns OK <- callback: Display (\"Welcome\") Transactions happen, etc... Disconnect -> <- callback: LinkStatus (False) Simple transaction Client Terminal Purchase -> <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"MasterCard / Ask for PIN / Signature possible\") <- callback: Display (\"Please wait\") <- callback: Display (\"Please wait\") <- callback: PrintReceipt , version=Merchant <- callback: PrintReceipt , version=Cardholder <- callback: Display (\"PURCHASE / Approved / Ask customer to take card\") <- callback: CardStatus (False) <- callback: Display (\"Approved\") <- Purchase returns OK <- callback: Display (\"Welcome\") Pre-amount transaction This sequence shows a pre-amount transaction, where the transaction is started with no amounts specified, and the amounts are sent later. Client Terminal PurchaseBeforeAmount -> <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"MasterCard / Ask for PIN / Signature possible\") <- callback: Display (\"Please wait\") <- callback: Display (\"Chip is read / Waiting for amount\") SendPurchaseAmounts -> <- SendPurchaseAmounts response OK <- callback: Display (\"Confirm total amount / MasterCard / 550,00 SEK\") <- callback: Display (\"Please wait\") <- callback: PrintReceipt , version=Merchant <- callback: Display (\"Purchase approved / Ask customer to take card\") <- callback: CardStatus (False) <- callback: Display (\"Purchase approved\") <- PurchaseBeforeAmount returns OK <- callback: Display (\"Welcome\") In this example the amounts are sent after the “Waiting for amount” display prompt, but that is not a requirement. Here is a sequence that shows the amount being sent before the card is inserted. Note that there is no “confirm total amount” display, because the amount is shown on the PIN entry screen so the customer has the option to cancel the transaction if the amount is wrong. Client Terminal PurchaseBeforeAmount -> <- callback: Display (\"New customer / Waiting for card\") SendPurchaseAmounts -> <- SendPurchaseAmounts response OK <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"MasterCard / Ask for PIN / Signature possible\") <- callback: Display (\"Please wait\") <- callback: PrintReceipt , version=Merchant <- callback: Display (\"Purchase approved / Ask customer to take card\") <- callback: CardStatus (False) <- callback: Display (\"Purchase approved\") <- PurchaseBeforeAmount returns OK <- callback: Display (\"Welcome\") Purchase with signature verification The sequence below shows the terminal asking for signature verification during a purchase, where the cardholder has chosen signature rather than PIN. Note that the merchant receipt is printed earlier than in a non-signature transaction, because the merchant receipt is the one that is signed by the customer. Note also that the card is removed before signature verification in this sequence. Client Terminal Purchase -> <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"MasterCard / Ask for PIN / Signature possible\") <- callback: Display (\"Please wait\") <- callback: PrintReceipt , version=Merchant <- callback: Display (\"550,00 SEK / MasterCard / Ask customer to take card / Verify signature\") <- callback: CardStatus (False) <- callback: VerifySignature VerifySignature returns True, signatureOk=True -> <- callback: PrintReceipt , version=Cardholder <- callback: Display (\"Purchase approved\") <- Purchase returns OK <- callback: Display (\"Welcome\") Cancelled transaction A cancelled transaction is where the cardholder chooses to end the transaction early. In this sequence the card is removed at the PIN entry stage. Note the CardStatus callback showing the card removal. Note also that only one receipt is printed here because there is normally no merchant receipt for cancelled transactions. Client Terminal Purchase -> <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"MasterCard / Ask for PIN / Signature possible\") <- callback: CardStatus (False) <- callback: Display (\"Transaction aborted\") <- callback: PrintReceipt , version=Cardholder <- Purchase returns OK <- callback: Display (\"Welcome\") Aborted transaction An aborted transaction is where the transaction is ended early by the client application. As detailed in the API documentation, there is no response to the RequestTransactionAbort method. The client application must wait for the transaction result to be returned and then act accordingly. Client Terminal Purchase -> <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"MasterCard / Ask for PIN / Signature possible\") RequestTransactionAbort -> <- callback: Display (\"Transaction aborted / Ask customer to take card\") <- callback: PrintReceipt , version=Cardholder <- callback: CardStatus (False) <- callback: Display (\"Transaction aborted\") <- Purchase returns OK Refund transaction A refund transaction behaves in the same way as a simple purchase transaction. It is simpler from the customer’s perspective because there is no PIN entry. The authorisation and authentication responsibility in a refund is on the merchant rather than the card issuer. Client Terminal Refund -> <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\") <- callback: Display (\"Please wait\") <- callback: PrintReceipt , version=Merchant <- callback: PrintReceipt , version=Cardholder <- callback: Display (\"Refund / Approved\") <- callback: CardStatus (False) <- callback: Display (\"Refund / Approved\") <- Refund returns OK Reversal of the last transaction The last approved transaction can normally be reversed. There is no scope for cardholder interaction here, and the client application will not have to supply any additional information. Client Terminal ReverseLastTransaction -> <- callback: PrintReceipt , version=Merchant <- callback: PrintReceipt , version=Cardholder <- callback: Display (\"Reversal / Approved\") <- Reversal returns OK Enable the card reader The client application can enable the card readers (chip card and magnetic stripe readers only) outside of a transaction. This allows the customer to present a card ahead of a transaction being started, allowing the client application more time to establish what kind of transaction is needed. This can also be used to read bonus / loyalty card information for administrative purposes. Client Terminal EnableCardReaders with enable = True -> <- EnableCardReaders returns OK <- callback: Display (\"New customer / Waiting for card\") <- callback: CardStatus (True) <- callback: Display (\"Please wait\") <- callback: CardAccepted (\"541333******0020\")"
  },
  "articles/transactions.html": {
    "href": "articles/transactions.html",
    "title": "Transactions",
    "keywords": "Transactions The EPAS client library offers several transaction methods. Each transaction is synchronous, so the method will return when the transaction is complete. This can take some time, since it involves waiting for a card to be presented, waiting for PIN entry, etc. Some of the methods in IClientApp will be called while the transaction is in progress. Similarly some of the optional handler methods will be called, if defined. All these methods will be called from a different thread to the one that is executing the transaction so there is no risk of deadlock in the callback mechanism. Examples of transaction flows are found here: transaction flows Transaction types The payment application supports the following transaction types: Purchase Cash Advance Refund Reversal Purchase transactions For purchase transactions are a few different methods available: Basic purchase, goods value specified only API reference ApiResult Purchase(decimal purchaseAmount, out TransactionResponse response) This is the simplest way to start a purchase transaction. The purchaseAmount parameter contains the goods value in the configured currency. There is no cashback in this method. If the method returns ApiResult.OK then the result of the transaction is given in the response parameter Basic purchase using an alternative payment method, goods value specified only API reference ApiResult Purchase(decimal purchaseAmount, string paymentMethod, out TransactionResponse response) If a specific alternative payment method is wanted for the transaction, this can be requested by submitting alternativePaymentMethodName on top of the purchaseAmount parameter, which contains the goods value in the configured currency. There is no cashback in this method. If the requested alternative payment method is not available on the terminal, the transaction will be aborted. Available alternative payment methods can change over time and also differ between terminals depending on which methods are available. There is currently no function to get a list of available alternative payment methods from the terminal. At the moment (Q1 2022) we have Swish and Klarna in Sweden, and soon Vipps will be available in Norway and MobilePay in Denmark and Finland See alternative payment methods for more information. Purchase with all amounts specified, i.e. goods value and cashback value API reference ApiResult Purchase(PurchaseTransactionAmounts transactionAmounts, out TransactionResponse response) The Purchase method starts a purchase transaction with all the transaction amounts specified in the transactionAmounts parameter. Note that if the cashback amount is zero then this is functionally identical to a basic purchase. Purchase with no amount API reference ApiResult PurchaseBeforeAmount(out TransactionResponse response) This method starts a purchase transaction before the amounts are known. The cardholder will be able to present a card and enter a PIN, and the terminal will then wait for the amounts to be supplied via SendPurcaseAmounts . The terminal will then prompt the cardholder to accept the amount. Note: The amounts can be sent any time after the transaction is started. It does not have to be sent at a specific stage in the transaction sequence. Cash Advance transactions API reference ApiResult CashAdvance(decimal cashAmount, out TransactionResponse response) This method starts a cash advance transaction for the specified cashAmount value. If the method returns ApiResult.OK then the result of the transaction is given in the response parameter. Note: the terminal must be configured to allow cash advance transactions. Note: cash advance transactions only work with card payments. Refund transactions Refunds of card payments API reference ApiResult Refund(decimal refundAmount, out TransactionResponse response) This method starts a refund transaction of a card purchase for the specified refundAmount value. Note: the receipt layout and contents for a refund transaction are different to those of a purchase transaction see here . Note: if the original purchase was done using an alternative payment method , the refund has to be done with the same payment method. This is due to money laundry prevention regulations. Refunds of alternative payment methods API reference ApiResult Refund(decimal refundAmount, out TransactionResponse response) Reversals API reference ApiResult ReverseLastTransaction(string transactionReference, out TransactionResponse response) A reversal is a request to cancel the most recent transaction. A transaction can only be reversed if it was approved. If the method returns ApiResult.OK then the result of the transaction is given in the response parameter. Transaction response All transactions, if executed correctly, will provide a response in an instance of the TransactionResponse class. Alternative payment methods For purchase and refund, there is also a posibillity for the ERC to request a specific non-card payment method. For more information, see alternative payment methods . Aborting a transaction API reference ApiResult RequestTransactionAbort() All transactions methods are synchronous, i.e. the method will return when the transaction is complete. There may be situations where the transaction must be cancelled, e.g. if the customer changes their mind and walks away. To do this, the ECR can call the RequestTransactionAbort method from a different thread (since the transaction thread is blocked at this stage until a response arrives). This method will send an abort request to the terminal. There is no response to the abort request. Instead, the transaction will be cancelled, if possible, and the transaction response will be sent back when the terminal has processed the abort request and has completed the transaction. Note that it is possible for the abort request to be received in the terminal at a point where it is too late to be processed. The ECR should, therefore, always correctly process the transaction result and the receipts, and should not assume that the transaction will definitely be aborted just because the request was sent. Card handling API reference ApiResult EnableCardReaders(bool enable, out EnableReadersResponse response) The EnableCardReaders requests will, if successful, enable or disable the terminal’s chip and magnetic card readers before a transaction is launched. If the enable parameter is true then the request is to enable the card readers. If false, the request is to disable the card readers. If the method returns ApiResult.OK then the response parameter contains the terminal’s response to the enable card readers request. When the card readers are enabled then cards will be processed in the same way as if there was a transaction in progress, i.e. the ECR will get card notifications and loyalty card processing (see loyalty card processing ) will operate as normal. The terminal will go as far as it can through the normal processes until it needs to know what transaction is involved, at which point it will wait for a transaction to be requested. The ECR can, therefore, use the EnableCardReaders method to do loyalty card functions such as registration, checking a balance, etc. Then once the card is processed it would call EnableCardReaders with the enable parameters set to false to close the card readers again. The CardStatus events (see CardStatus ) will allow the ECR to prompt for card removal if desired."
  },
  "articles/using_the_library.html": {
    "href": "articles/using_the_library.html",
    "title": "Using the EPAS client library",
    "keywords": "Using the EPAS client library Connecting to the terminal After initialisation , the first step for the ECR is to connect to the terminal. The terminal supports connection by network or by USB. The choice is determined by configuration in the terminal; the terminal will only listen for a connection using the configured method. Network connections are made using the ConnectNetwork method, while USB connections are made using the ConnectUsb method. void ConnectToTerminal() { TerminalNetworkConnection tc = new TerminalNetworkConnection(); tc.TerminalConnectionDetails = new IPEndPoint(IPAddress.Parse(txtTerminalAddress.Text), int.Parse(txtTerminalPort.Text)); tc.UseKeepAlive = optKeepalive.Checked; ApiResult result = mEpas.ConnectNetwork(tc, optForceReconnect.Checked); LogApiResult(result, \"Connect\"); } There is a Disconnect method that can be used to disconnect from the terminal, but it is not required. The terminal will automatically detect if the connection has been lost. When the client library loses connection with a terminal the LinkStatus callback will be called if it has been defined. Note: The client library does not support automatic reconnection. The library has no way of knowing if the disconnection was intentional or not, or if is something that will be resolved quickly or not, so it has no way to know if automatic reconnection is a good idea. If the ECR wishes to handle a disconnection, therefore, it should handle the LinkStatus callback. If the link goes down then the terminal will do two things: Abort any transaction that is ongoing, and Perform an automatic log out. When the ECR wishes to reconnect, therefore, it should: Call the appropriate connection method (see above). Call the Login method. Logging in The ECR must log in to the terminal before it can run any transactions. The login includes necessary details about the terminal. See Login . void LoginToTerminal() { TerminalEnvironment te = new TerminalEnvironment() { AuthorisationServer = new IPEndPoint(IPAddress.Parse(\"185.27.171.42\"), 55144), ConfigurationServer = new IPEndPoint(IPAddress.Parse(\"185.27.171.42\"), 55133), ISO639_1_LanguageCode = TerminalEnvironment.LangSwedish, OperatorId = \"cashier_1\", TerminalId = \"80000082\" }; if (epas.Login(te, out LoginResponse lr) == ApiResult.OK) { if (lr.LoggedIn) { ... } } } Note : The ECR only needs to log in once. There is no need to log in for every transaction. The ECR can log out as well, but there is rarely any need to do so, unless the ECR needs to change some of the terminal options, like the terminal ID. See Logout . Note : If the terminal is disconnected, it is automatically logged out. Transactions When the library is connected and logged in, it is ready to perform transactions with the terminal. The EPAS client library offers several transaction methods, of which the most basic is Purchase , which can be used like this: public void SimplePurchase(decimal amount) { Log(\"Simple purchase of \" + string.Format(\"{0:.00}\", amount)); TransactionResponse response; ApiResult result = mEpas.Purchase(amount, out response); if (result == ApiResult.OK) { HandleTxnResponse(response); } LogApiResult(result, \"Simple purchase: \" + response?.ToString()); } Each transaction is synchronous, so the method will return when the transaction is complete. This can take some time, since it involves waiting for a card to be presented, waiting for PIN entry, etc. Some of the methods in IClientApp will be called while the transaction is in progress. Similarly some of the optional handler methods will be called, if defined. All these methods will be called from a different thread to the one that is executing the transaction so there is no risk of deadlock in the callback mechanism. Transaction types See the transactions page for more details on how to perform different types of transactions. The examples page contains examples of different transactions. Configuration There are some configuration options in the client library. These are defined in the library’s Options property, which is an instance of the OperatingParameters class. Notes on the API Calling API methods API calls into the library are always synchronous. When a purchase transaction is called, for example, the method does not return until the transaction has ended. In general, therefore, it is best for the ECR software to avoid calling API methods from the user interface thread Return values Most library methods return an ApiResult value. These are related to the operation of the library, the communications link, and the protocols involved. They are not directly related to transactions or other high-level operations. Note: a return value of ApiResult.OK only indicates that the low level communications and messaging was successful. It does not, for example, indicate that a transaction was approved."
  },
  "index.html": {
    "href": "index.html",
    "title": "The EPAS Client Library",
    "keywords": "The EPAS Client Library Version history See the Release notes Glossary Term Meaning CHAOI Cardholder and Operator Interface, see References DCC Dynamic Currency Conversion ECR Electronic Cash Register EPAS Electronic Protocol Application Software References EPASOrg: “Sale to POI Protocol Specifications”, v1.0, October 2010 Swedbank / CEKAB: “Cardholder and Operator Interface”, v4.02, August 2009 Swedbank bulletin: “Contactless”, v1.0 release 5 Background The EPAS protocol is defines a large and complex protocol for the interaction of payment terminals and ECRs. Westpay payment terminals implement a subset of this specification, but also some customisations and specialisations. This is because the world of payments and terminals has moved on substantially since 2010 and the documented protocol was not capable enough to do what was required. The library The combination of the complexity of EPAS and the Westpay customisations meant that integrating an ECR with a Westpay terminal was not a simple process, and there was an obvious need to have a client library that would make it much simpler to integrate an ECR with a Westpay payment terminal. The EPAS Client Library is intended to greatly simply the task of ECR developers who are integrating their product with Westpay terminals. The features of the EPAS Client Library are: Implemented as a .NET 4.7.2 module for easy integration. Provides a simple interface to operate the full range of supported transactions. Removes the need to know anything of the EPAS protocol. Removes the need to implement connectivity to the terminal. Getting started The first step is to integrate the library in your ECR application: Integrating the EPAS Client Library When that is done you are ready to start using the library to perform transactions with the terminal: Using the EPAS Client Library Further reading Additional functionality Alternative payment methods Dynamic Currency Conversion Identifying cards Log storage Receipts Transaction types Transaction examples"
  }
}